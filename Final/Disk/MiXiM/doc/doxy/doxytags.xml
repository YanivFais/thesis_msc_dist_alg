<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>MiXiM API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00142</filename>
    <includes id="a00143" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <includes id="a00150" name="NicEntryDebug.h" local="yes" imported="no">NicEntryDebug.h</includes>
    <includes id="a00152" name="NicEntryDirect.h" local="yes" imported="no">NicEntryDirect.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="a00218" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00143</filename>
    <includes id="a00148" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">BaseConnectionManager</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <class kind="class">BaseConnectionManager::CoordSet</class>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00144</filename>
    <includes id="a00145" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="a00223" name="Move.h" local="yes" imported="no">Move.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00145</filename>
    <includes id="a00174" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="a00223" name="Move.h" local="yes" imported="no">Move.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="a00143" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <class kind="class">ChannelAccess</class>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00146</filename>
    <includes id="a00147" name="ConnectionManager.h" local="yes" imported="no">ConnectionManager.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>7713f40391ce1dfc9b8330a6f4c13f90</anchor>
      <arglist>(ConnectionManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00147</filename>
    <includes id="a00143" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <class kind="class">ConnectionManager</class>
  </compound>
  <compound kind="file">
    <name>NicEntry.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00148</filename>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">NicEntry</class>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00149</filename>
    <includes id="a00150" name="NicEntryDebug.h" local="yes" imported="no">NicEntryDebug.h</includes>
    <includes id="a00145" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00150</filename>
    <includes id="a00148" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">NicEntryDebug</class>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00151</filename>
    <includes id="a00152" name="NicEntryDirect.h" local="yes" imported="no">NicEntryDirect.h</includes>
    <includes id="a00145" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>a00152</filename>
    <includes id="a00148" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00153</filename>
    <includes id="a00154" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <includes id="a00225" name="PassedMessage.h" local="yes" imported="no">PassedMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00154</filename>
    <includes id="a00160" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
    <class kind="class">BaseApplLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseArp.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00155</filename>
    <includes id="a00156" name="BaseArp.h" local="yes" imported="no">BaseArp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>9d950baedf1068394c8c685e523a22c6</anchor>
      <arglist>(BaseArp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseArp.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00156</filename>
    <includes id="a00166" name="BaseModule.h" local="no" imported="no">BaseModule.h</includes>
    <includes id="a00218" name="FindModule.h" local="no" imported="no">FindModule.h</includes>
    <class kind="class">BaseArp</class>
    <class kind="class">BaseArpAccess</class>
  </compound>
  <compound kind="file">
    <name>BaseBattery.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00157</filename>
    <includes id="a00158" name="BaseBattery.h" local="yes" imported="no">BaseBattery.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseBattery.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00158</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
  </compound>
  <compound kind="file">
    <name>BaseLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00159</filename>
    <includes id="a00160" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00160</filename>
    <includes id="a00174" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="a00225" name="PassedMessage.h" local="yes" imported="no">PassedMessage.h</includes>
    <class kind="class">BaseLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00161</filename>
    <includes id="a00162" name="BaseMacLayer.h" local="yes" imported="no">BaseMacLayer.h</includes>
    <includes id="a00222" name="MacControlInfo.h" local="yes" imported="no">MacControlInfo.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>248c3a8421f876d37fe7256ac9dcf05b</anchor>
      <arglist>(BaseMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00162</filename>
    <includes id="a00160" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
    <includes id="a00191" name="MacToPhyInterface.h" local="no" imported="no">MacToPhyInterface.h</includes>
    <class kind="class">BaseMacLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00163</filename>
    <includes id="a00164" name="BaseMobility.h" local="yes" imported="no">BaseMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>1bc235751df246807bf46bb477c2143f</anchor>
      <arglist>(BaseMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00164</filename>
    <includes id="a00174" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="a00223" name="Move.h" local="yes" imported="no">Move.h</includes>
    <class kind="class">BaseMobility</class>
  </compound>
  <compound kind="file">
    <name>BaseModule.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00165</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="a00170" name="BaseUtility.h" local="yes" imported="no">BaseUtility.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseModule.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00166</filename>
    <includes id="a00221" name="ImNotifiable.h" local="yes" imported="no">ImNotifiable.h</includes>
    <includes id="a00218" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="a00220" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <includes id="a00170" name="BaseUtility.h" local="yes" imported="no">BaseUtility.h</includes>
    <class kind="class">BaseModule</class>
    <member kind="define">
      <type>#define</type>
      <name>EV_clear</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>1534a42f2415cc7d738ca89ceff3d8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV_clear</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>dba225dfeaaba955392001ec4f3401a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseNetwLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00167</filename>
    <includes id="a00168" name="BaseNetwLayer.h" local="yes" imported="no">BaseNetwLayer.h</includes>
    <includes id="a00224" name="NetwControlInfo.h" local="yes" imported="no">NetwControlInfo.h</includes>
    <includes id="a00222" name="MacControlInfo.h" local="yes" imported="no">MacControlInfo.h</includes>
    <includes id="a00162" name="BaseMacLayer.h" local="yes" imported="no">BaseMacLayer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>447326f6b7f4cddc1dd6380ba2bfd5f5</anchor>
      <arglist>(BaseNetwLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseNetwLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00168</filename>
    <includes id="a00160" name="BaseLayer.h" local="no" imported="no">BaseLayer.h</includes>
    <includes id="a00156" name="BaseArp.h" local="yes" imported="no">BaseArp.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">BaseNetwLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseUtility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00169</filename>
    <includes id="a00170" name="BaseUtility.h" local="yes" imported="no">BaseUtility.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="a00218" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="a00223" name="Move.h" local="yes" imported="no">Move.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>fa18d05528bb317dc2935a50a7a52fe7</anchor>
      <arglist>(BaseUtility)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>e32e0edc902760a601f0f73f2791d538</anchor>
      <arglist>(std::ostream &amp;os, const BaseUtility::SubscriberVector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseUtility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00170</filename>
    <includes id="a00221" name="ImNotifiable.h" local="yes" imported="no">ImNotifiable.h</includes>
    <includes id="a00220" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">BaseUtility</class>
    <class kind="class">BaseUtility::Subscriber</class>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00171</filename>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>040c09d94eb71afa68e5d70312454ec3</anchor>
      <arglist>(BaseWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00172</filename>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">BaseWorldUtility</class>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00173</filename>
    <includes id="a00174" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00174</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="a00158" name="BaseBattery.h" local="yes" imported="no">BaseBattery.h</includes>
    <class kind="class">BatteryAccess</class>
  </compound>
  <compound kind="file">
    <name>TestApplLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00175</filename>
    <includes id="a00176" name="TestApplLayer.h" local="yes" imported="no">TestApplLayer.h</includes>
    <includes id="a00224" name="NetwControlInfo.h" local="yes" imported="no">NetwControlInfo.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="no" imported="no">SimpleAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>TestApplLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>a00176</filename>
    <includes id="a00154" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <class kind="class">TestApplLayer</class>
  </compound>
  <compound kind="file">
    <name>AnalogueModel.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00177</filename>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <class kind="class">AnalogueModel</class>
  </compound>
  <compound kind="file">
    <name>BaseDecider.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00178</filename>
    <includes id="a00179" name="BaseDecider.h" local="yes" imported="no">BaseDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseDecider.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00179</filename>
    <includes id="a00187" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <class kind="class">BaseDecider</class>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00180</filename>
    <includes id="a00181" name="BasePhyLayer.h" local="yes" imported="no">BasePhyLayer.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="a00190" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="a00197" name="PhyToMacControlInfo.h" local="yes" imported="no">PhyToMacControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>4532f68b81888efac03a569bc88db971</anchor>
      <arglist>(BasePhyLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00181</filename>
    <includes id="a00145" name="ChannelAccess.h" local="yes" imported="no">ChannelAccess.h</includes>
    <includes id="a00188" name="DeciderToPhyInterface.h" local="yes" imported="no">DeciderToPhyInterface.h</includes>
    <includes id="a00191" name="MacToPhyInterface.h" local="yes" imported="no">MacToPhyInterface.h</includes>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="a00187" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <includes id="a00183" name="ChannelInfo.h" local="yes" imported="no">ChannelInfo.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <class kind="class">BasePhyLayer</class>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00182</filename>
    <includes id="a00183" name="ChannelInfo.h" local="yes" imported="no">ChannelInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00183</filename>
    <class kind="class">ChannelInfo</class>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
  </compound>
  <compound kind="file">
    <name>ChannelState.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00184</filename>
    <includes id="a00185" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelState.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00185</filename>
    <class kind="class">ChannelState</class>
  </compound>
  <compound kind="file">
    <name>Decider.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00186</filename>
    <includes id="a00187" name="Decider.h" local="yes" imported="no">Decider.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00187</filename>
    <includes id="a00188" name="DeciderToPhyInterface.h" local="yes" imported="no">DeciderToPhyInterface.h</includes>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <includes id="a00185" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
    <class kind="class">DeciderResult</class>
    <class kind="class">Decider</class>
  </compound>
  <compound kind="file">
    <name>DeciderToPhyInterface.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00188</filename>
    <class kind="class">DeciderToPhyInterface</class>
  </compound>
  <compound kind="file">
    <name>Interpolation.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00189</filename>
    <class kind="class">Interpolated</class>
    <class kind="class">PairLess</class>
    <class kind="class">NextSmaller</class>
    <class kind="class">Nearest</class>
    <class kind="class">Linear</class>
    <class kind="class">ConstInterpolateableIterator</class>
    <class kind="class">InterpolateableIterator</class>
    <class kind="class">InterpolateableMap</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyControlInfo.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00190</filename>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <class kind="class">MacToPhyControlInfo</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyInterface.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00191</filename>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <includes id="a00185" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
    <includes id="a00199" name="PhyUtils.h" local="yes" imported="no">PhyUtils.h</includes>
    <class kind="class">MacToPhyInterface</class>
  </compound>
  <compound kind="file">
    <name>Mapping.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00192</filename>
    <includes id="a00194" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <includes id="a00196" name="MappingUtils.h" local="yes" imported="no">MappingUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00193</filename>
    <includes id="a00194" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00194</filename>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <includes id="a00189" name="Interpolation.h" local="yes" imported="no">Interpolation.h</includes>
    <class kind="class">Dimension</class>
    <class kind="class">DimensionSet</class>
    <class kind="class">Argument</class>
    <class kind="class">NoNextIteratorException</class>
    <class kind="class">ConstMappingIterator</class>
    <class kind="class">ConstMapping</class>
    <class kind="class">MappingIterator</class>
    <class kind="class">Mapping</class>
    <class kind="class">SimpleConstMappingIterator</class>
    <class kind="class">SimpleConstMapping</class>
  </compound>
  <compound kind="file">
    <name>MappingUtils.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00195</filename>
    <includes id="a00196" name="MappingUtils.h" local="yes" imported="no">MappingUtils.h</includes>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator*</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>72ba21e2a57c9cf5d82e3d8bad7773d3</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator/</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>8862626cd338cc03937781305b9f7454</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator+</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>63299cd2406eecba667701228d96f6d9</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator-</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>23e9957ca9600b3f5e04bf1ea88701d2</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MappingUtils.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00196</filename>
    <includes id="a00194" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <class kind="class">BaseFilteredIterator</class>
    <class kind="class">FilteredMappingIterator</class>
    <class kind="class">TimeMappingIterator</class>
    <class kind="class">TimeMapping</class>
    <class kind="class">LinearIntplMappingIterator</class>
    <class kind="class">LinearIntplMapping</class>
    <class kind="class">Interpolated&lt; Mapping * &gt;</class>
    <class kind="class">Linear&lt; double, Mapping *, std::map&lt; double, Mapping * &gt;::value_type, std::map&lt; double, Mapping * &gt;::const_iterator &gt;</class>
    <class kind="class">ConstantSimpleConstMapping</class>
    <class kind="class">ConstMappingIteratorWrapper</class>
    <class kind="class">ConstMappingWrapper</class>
    <class kind="class">MultiDimMappingIterator</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">FilledUpMappingIterator</class>
    <class kind="class">FilledUpMapping</class>
    <class kind="class">MappingUtils</class>
    <class kind="class">ConcatConstMappingIterator</class>
    <class kind="class">ConcatConstMapping</class>
    <class kind="class">BaseDelayedIterator</class>
    <class kind="class">BaseDelayedMapping</class>
    <class kind="class">ConstDelayedMapping</class>
    <class kind="class">DelayedMapping</class>
    <member kind="typedef">
      <type>BaseFilteredIterator&lt; ConstMappingIterator &gt;</type>
      <name>FilteredConstMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ga645dfa599e41183c494290d0abba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredConstMappingIterator, ConstMappingIterator &gt;</type>
      <name>ConstDelayedMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>g65c3da57807297c8c20a24d18e142051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredMappingIterator, MappingIterator &gt;</type>
      <name>DelayedMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>gf6d7bb3c43fe0bda97133e548ce327c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator*</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>72ba21e2a57c9cf5d82e3d8bad7773d3</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator/</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>8862626cd338cc03937781305b9f7454</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator+</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>63299cd2406eecba667701228d96f6d9</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator-</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>23e9957ca9600b3f5e04bf1ea88701d2</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyToMacControlInfo.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00197</filename>
    <includes id="a00187" name="Decider.h" local="no" imported="no">Decider.h</includes>
    <class kind="class">PhyToMacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>PhyUtils.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00198</filename>
    <includes id="a00199" name="PhyUtils.h" local="yes" imported="no">PhyUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>PhyUtils.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00199</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">RadioStateAnalogueModel</class>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <class kind="class">Radio</class>
    <class kind="class">RSAMConstMappingIterator</class>
    <class kind="class">RSAMMapping</class>
  </compound>
  <compound kind="file">
    <name>Signal.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00200</filename>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
  </compound>
  <compound kind="file">
    <name>Signal_.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>a00201</filename>
    <includes id="a00223" name="Move.h" local="yes" imported="no">Move.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">Signal</class>
  </compound>
  <compound kind="file">
    <name>FrameTimer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00202</filename>
    <includes id="a00203" name="FrameTimer.h" local="yes" imported="no">FrameTimer.h</includes>
  </compound>
  <compound kind="file">
    <name>FrameTimer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00203</filename>
    <includes id="a00205" name="FrameTimerGenerator.h" local="yes" imported="no">FrameTimerGenerator.h</includes>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">FrameTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>FRAME_TIMER_H</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a0d77c1916fcaa0cadeb5c093b7fb55b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameTimerGenerator.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00204</filename>
    <includes id="a00205" name="FrameTimerGenerator.h" local="yes" imported="no">FrameTimerGenerator.h</includes>
    <includes id="a00203" name="FrameTimer.h" local="yes" imported="no">FrameTimer.h</includes>
  </compound>
  <compound kind="file">
    <name>FrameTimerGenerator.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00205</filename>
    <includes id="a00207" name="GlobalTime.h" local="yes" imported="no">GlobalTime.h</includes>
    <class kind="class">FrameTimerGenerator</class>
    <member kind="define">
      <type>#define</type>
      <name>FRAME_TIMER_GENERATOR_H</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>6f2bb0380fcbcde1e0c1cc544f0564b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalTime.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00206</filename>
    <includes id="a00207" name="GlobalTime.h" local="yes" imported="no">GlobalTime.h</includes>
  </compound>
  <compound kind="file">
    <name>GlobalTime.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00207</filename>
    <class kind="class">GlobalTime</class>
    <member kind="define">
      <type>#define</type>
      <name>GLOBAL_TIME_H</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>92bd3cb691bb87d7ddcba351d06b74e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RepeatTimer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00208</filename>
    <includes id="a00209" name="RepeatTimer.h" local="yes" imported="no">RepeatTimer.h</includes>
  </compound>
  <compound kind="file">
    <name>RepeatTimer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00209</filename>
    <includes id="a00211" name="RepeatTimerCore.h" local="yes" imported="no">RepeatTimerCore.h</includes>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">RepeatTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>REPEAT_TIMER_H</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>8ab79cc1b4590bda9b54df690f1575f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RepeatTimerCore.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00210</filename>
    <includes id="a00211" name="RepeatTimerCore.h" local="yes" imported="no">RepeatTimerCore.h</includes>
    <includes id="a00209" name="RepeatTimer.h" local="yes" imported="no">RepeatTimer.h</includes>
  </compound>
  <compound kind="file">
    <name>RepeatTimerCore.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00211</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">RepeatTimerCore</class>
    <class kind="struct">RepeatTimerCore::TInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>REPEATTIMER_CORE_H</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>e2891916471ba089552b738d13a7ac95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00212</filename>
    <includes id="a00213" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="a00215" name="TimerCore.h" local="yes" imported="no">TimerCore.h</includes>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00213</filename>
    <includes id="a00215" name="TimerCore.h" local="yes" imported="no">TimerCore.h</includes>
    <class kind="class">Timer</class>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_H</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>1090b98f7d0a19de5dabea732e8138db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimerCore.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00214</filename>
    <includes id="a00215" name="TimerCore.h" local="yes" imported="no">TimerCore.h</includes>
    <includes id="a00213" name="Timer.h" local="yes" imported="no">Timer.h</includes>
  </compound>
  <compound kind="file">
    <name>TimerCore.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>a00215</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">TimerCore</class>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_CORE_H</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>8bbdbc974af77312ba46497ca066be74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00216</filename>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00217</filename>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <class kind="class">Coord</class>
  </compound>
  <compound kind="file">
    <name>FindModule.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00218</filename>
    <class kind="class">FindModule</class>
    <class kind="class">ModuleAccess</class>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00219</filename>
    <class kind="class">FWMath</class>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>e71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT2</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>66b3ab30f1332874326ed93969e496e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>002b2f4894492820fe708b1b7e7c5e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HostState.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00220</filename>
    <includes id="a00221" name="ImNotifiable.h" local="yes" imported="no">ImNotifiable.h</includes>
    <class kind="class">HostState</class>
  </compound>
  <compound kind="file">
    <name>ImNotifiable.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00221</filename>
    <class kind="class">BBItem</class>
    <class kind="class">ImNotifiable</class>
    <member kind="define">
      <type>#define</type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>669e84240af0963ef845683e40a0c476</anchor>
      <arglist>(BASECLASS)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MacControlInfo.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00222</filename>
    <class kind="class">MacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>Move.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00223</filename>
    <includes id="a00217" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="a00170" name="BaseUtility.h" local="yes" imported="no">BaseUtility.h</includes>
    <includes id="a00221" name="ImNotifiable.h" local="yes" imported="no">ImNotifiable.h</includes>
    <class kind="class">Move</class>
  </compound>
  <compound kind="file">
    <name>NetwControlInfo.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00224</filename>
    <class kind="class">NetwControlInfo</class>
  </compound>
  <compound kind="file">
    <name>PassedMessage.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00225</filename>
    <includes id="a00221" name="ImNotifiable.h" local="yes" imported="no">ImNotifiable.h</includes>
    <class kind="class">PassedMessage</class>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00226</filename>
    <member kind="enumvalue">
      <name>L3BROADCAST</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b9366702cbd97be712e57f88b0ef4e8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L2BROADCAST</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b7f19df32f2804a6a4898283c48208a80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>winsupport.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00227</filename>
    <includes id="a00228" name="winsupport.h" local="yes" imported="no">winsupport.h</includes>
  </compound>
  <compound kind="file">
    <name>winsupport.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>a00228</filename>
  </compound>
  <compound kind="file">
    <name>groups.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/doc/</path>
    <filename>a00229</filename>
  </compound>
  <compound kind="file">
    <name>mainpage.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/doc/</path>
    <filename>a00230</filename>
  </compound>
  <compound kind="file">
    <name>RandomFreqTimeModel.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00231</filename>
    <includes id="a00232" name="RandomFreqTimeModel.h" local="yes" imported="no">RandomFreqTimeModel.h</includes>
  </compound>
  <compound kind="file">
    <name>RandomFreqTimeModel.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00232</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">RandomFreqTimeModel</class>
  </compound>
  <compound kind="file">
    <name>RandomFrequencyOnlyModel.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00233</filename>
    <includes id="a00234" name="RandomFrequencyOnlyModel.h" local="yes" imported="no">RandomFrequencyOnlyModel.h</includes>
  </compound>
  <compound kind="file">
    <name>RandomFrequencyOnlyModel.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00234</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">RandomFrequencyOnlyModel</class>
  </compound>
  <compound kind="file">
    <name>SamplePhyLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00235</filename>
    <includes id="a00236" name="SamplePhyLayer.h" local="yes" imported="no">SamplePhyLayer.h</includes>
    <includes id="a00239" name="ThresholdDecider.h" local="yes" imported="no">ThresholdDecider.h</includes>
    <includes id="a00232" name="RandomFreqTimeModel.h" local="yes" imported="no">RandomFreqTimeModel.h</includes>
    <includes id="a00234" name="RandomFrequencyOnlyModel.h" local="yes" imported="no">RandomFrequencyOnlyModel.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>3feb6d513d00da0ecf9f7eee1485d4ba</anchor>
      <arglist>(SamplePhyLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SamplePhyLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00236</filename>
    <includes id="a00286" name="PhyLayer.h" local="no" imported="no">PhyLayer.h</includes>
    <class kind="class">SamplePhyLayer</class>
  </compound>
  <compound kind="file">
    <name>SimpleMacLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00237</filename>
    <includes id="a00238" name="SimpleMacLayer.h" local="yes" imported="no">SimpleMacLayer.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>e4d3c3563822a627ea733fbbe6460944</anchor>
      <arglist>(SimpleMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleMacLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00238</filename>
    <includes id="a00191" name="MacToPhyInterface.h" local="yes" imported="no">MacToPhyInterface.h</includes>
    <includes id="a00190" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="a00201" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <class kind="class">SimpleMacLayer</class>
  </compound>
  <compound kind="file">
    <name>ThresholdDecider.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>a00239</filename>
    <includes id="a00187" name="Decider.h" local="no" imported="no">Decider.h</includes>
    <class kind="class">ThresholdDecider</class>
  </compound>
  <compound kind="file">
    <name>SimpleNetwLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/CSMAMac/</path>
    <filename>a00240</filename>
    <includes id="a00241" name="SimpleNetwLayer.h" local="yes" imported="no">SimpleNetwLayer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>b3197c3d8abea24d071d7cd8a75375a3</anchor>
      <arglist>(SimpleNetwLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleNetwLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/CSMAMac/</path>
    <filename>a00241</filename>
    <includes id="a00166" name="BaseModule.h" local="no" imported="no">BaseModule.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="no" imported="no">SimpleAddress.h</includes>
    <includes id="a00222" name="MacControlInfo.h" local="no" imported="no">MacControlInfo.h</includes>
    <class kind="class">SimpleNetwLayer</class>
  </compound>
  <compound kind="file">
    <name>JakesFading.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00242</filename>
    <includes id="a00243" name="JakesFading.h" local="yes" imported="no">JakesFading.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="no" imported="no">BaseWorldUtility.h</includes>
  </compound>
  <compound kind="file">
    <name>JakesFading.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00243</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">JakesFading</class>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00244</filename>
    <includes id="a00245" name="LogNormalShadowing.h" local="yes" imported="no">LogNormalShadowing.h</includes>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00245</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <class kind="class">LogNormalShadowing</class>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00246</filename>
    <includes id="a00247" name="SimplePathlossModel.h" local="yes" imported="no">SimplePathlossModel.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>a00247</filename>
    <includes id="a00177" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="a00192" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <includes id="a00172" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimplePathlossModel</class>
  </compound>
  <compound kind="file">
    <name>BurstApplLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/application/</path>
    <filename>a00248</filename>
    <includes id="a00249" name="BurstApplLayer.h" local="yes" imported="no">BurstApplLayer.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>f83cce298962d3124de99c60d2e69daf</anchor>
      <arglist>(BurstApplLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BurstApplLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/application/</path>
    <filename>a00249</filename>
    <includes id="a00176" name="TestApplLayer.h" local="no" imported="no">TestApplLayer.h</includes>
    <class kind="class">BurstApplLayer</class>
  </compound>
  <compound kind="file">
    <name>BurstApplLayerBattery.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/application/</path>
    <filename>a00250</filename>
    <includes id="a00251" name="BurstApplLayerBattery.h" local="yes" imported="no">BurstApplLayerBattery.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>3f03aefaf835949340fd7afa34dabd42</anchor>
      <arglist>(BurstApplLayerBattery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BurstApplLayerBattery.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/application/</path>
    <filename>a00251</filename>
    <includes id="a00249" name="BurstApplLayer.h" local="yes" imported="no">BurstApplLayer.h</includes>
    <includes id="a00220" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <class kind="class">BurstApplLayerBattery</class>
  </compound>
  <compound kind="file">
    <name>UnitDisk.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/connectionManager/</path>
    <filename>a00252</filename>
    <includes id="a00253" name="UnitDisk.h" local="yes" imported="no">UnitDisk.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>6bec5b2ebaf2e2fd92e8ab3bb635e5fb</anchor>
      <arglist>(UnitDisk)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitDisk.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/connectionManager/</path>
    <filename>a00253</filename>
    <includes id="a00147" name="ConnectionManager.h" local="yes" imported="no">ConnectionManager.h</includes>
    <class kind="class">UnitDisk</class>
    <member kind="define">
      <type>#define</type>
      <name>UNIT_DISK_H</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>8718482b7719970517b0ec15c3350f4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mac/</path>
    <filename>a00254</filename>
    <includes id="a00255" name="CSMAMacLayer.h" local="yes" imported="no">CSMAMacLayer.h</includes>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="a00190" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="a00156" name="BaseArp.h" local="no" imported="no">BaseArp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>58e7decb28022bb3832fbe9f43474307</anchor>
      <arglist>(CSMAMacLayer) void CSMAMacLayer</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CSMAMacLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mac/</path>
    <filename>a00255</filename>
    <includes id="a00199" name="PhyUtils.h" local="no" imported="no">PhyUtils.h</includes>
    <includes id="a00162" name="BaseMacLayer.h" local="no" imported="no">BaseMacLayer.h</includes>
    <includes id="a00170" name="BaseUtility.h" local="no" imported="no">BaseUtility.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="no" imported="no">SimpleAddress.h</includes>
    <includes id="a00191" name="MacToPhyInterface.h" local="no" imported="no">MacToPhyInterface.h</includes>
    <class kind="class">CSMAMacLayer</class>
  </compound>
  <compound kind="file">
    <name>Mac80211.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mac/</path>
    <filename>a00256</filename>
    <includes id="a00257" name="Mac80211.h" local="yes" imported="no">Mac80211.h</includes>
    <includes id="a00222" name="MacControlInfo.h" local="yes" imported="no">MacControlInfo.h</includes>
    <includes id="a00190" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="a00197" name="PhyToMacControlInfo.h" local="no" imported="no">PhyToMacControlInfo.h</includes>
    <includes id="a00226" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <includes id="a00281" name="Decider80211.h" local="no" imported="no">Decider80211.h</includes>
    <includes id="a00284" name="DeciderResult80211.h" local="no" imported="no">DeciderResult80211.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CASE</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>60cc06bef97da802b8522d258ac4fe89</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>4c21c955d89f1bc4e66a7a3e7b7ee189</anchor>
      <arglist>(Mac80211)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mac/</path>
    <filename>a00257</filename>
    <includes id="a00162" name="BaseMacLayer.h" local="no" imported="no">BaseMacLayer.h</includes>
    <includes id="a00297" name="Consts80211.h" local="no" imported="no">Consts80211.h</includes>
    <includes id="a00156" name="BaseArp.h" local="no" imported="no">BaseArp.h</includes>
    <class kind="class">Mac80211</class>
    <class kind="struct">Mac80211::NeighborEntry</class>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00258</filename>
    <includes id="a00259" name="ANSimMobility.h" local="yes" imported="no">ANSimMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00258.html</anchorfile>
      <anchor>399bcb71d016b6dd8bf522e59e8932f1</anchor>
      <arglist>(ANSimMobility)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cXMLElement *</type>
      <name>firstChildWithTag</name>
      <anchorfile>a00258.html</anchorfile>
      <anchor>a6f4fca20eb2e9de97600cda2fd38773</anchor>
      <arglist>(cXMLElement *node, const char *tagname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANSimMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00259</filename>
    <includes id="a00271" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <class kind="class">ANSimMobility</class>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00260</filename>
    <includes id="a00261" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
  </compound>
  <compound kind="file">
    <name>BonnMotionFileCache.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00261</filename>
    <includes id="a00164" name="BaseMobility.h" local="yes" imported="no">BaseMobility.h</includes>
    <class kind="class">BonnMotionFile</class>
    <class kind="class">BonnMotionFileCache</class>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00262</filename>
    <includes id="a00263" name="BonnMotionMobility.h" local="yes" imported="no">BonnMotionMobility.h</includes>
    <includes id="a00261" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00262.html</anchorfile>
      <anchor>3cbeb0ea11367495cb833ac9e536bd68</anchor>
      <arglist>(BonnMotionMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BonnMotionMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00263</filename>
    <includes id="a00271" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="a00261" name="BonnMotionFileCache.h" local="yes" imported="no">BonnMotionFileCache.h</includes>
    <class kind="class">BonnMotionMobility</class>
  </compound>
  <compound kind="file">
    <name>CircleMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00264</filename>
    <includes id="a00265" name="CircleMobility.h" local="yes" imported="no">CircleMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>973b7c1d16f3e30541ded67c288f6dbd</anchor>
      <arglist>(CircleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CircleMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00265</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">CircleMobility</class>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00266</filename>
    <includes id="a00267" name="ConstSpeedMobility.h" local="yes" imported="no">ConstSpeedMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>caab822b5e908d51b5d97d6070172a3d</anchor>
      <arglist>(ConstSpeedMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstSpeedMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00267</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">ConstSpeedMobility</class>
  </compound>
  <compound kind="file">
    <name>LinearMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00268</filename>
    <includes id="a00269" name="LinearMobility.h" local="yes" imported="no">LinearMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>0bd29e954d28daa836d9e27c34626b1a</anchor>
      <arglist>(LinearMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00269</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">LinearMobility</class>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00270</filename>
    <includes id="a00271" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSegmentsMobilityBase.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00271</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">LineSegmentsMobilityBase</class>
  </compound>
  <compound kind="file">
    <name>MassMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00272</filename>
    <includes id="a00273" name="MassMobility.h" local="yes" imported="no">MassMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>4955a0b4c86280fffeceb8a5bbc0c746</anchor>
      <arglist>(MassMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00273</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">MassMobility</class>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00274</filename>
    <includes id="a00275" name="RectangleMobility.h" local="yes" imported="no">RectangleMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00274.html</anchorfile>
      <anchor>b1c6f90604524480bbe574b9cfd22398</anchor>
      <arglist>(RectangleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RectangleMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00275</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">RectangleMobility</class>
  </compound>
  <compound kind="file">
    <name>TractorMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00276</filename>
    <includes id="a00277" name="TractorMobility.h" local="yes" imported="no">TractorMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00276.html</anchorfile>
      <anchor>4a5e5231468fc93bf94972dd6adb0987</anchor>
      <arglist>(TractorMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TractorMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00277</filename>
    <includes id="a00164" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <class kind="class">TractorMobility</class>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00278</filename>
    <includes id="a00279" name="TurtleMobility.h" local="yes" imported="no">TurtleMobility.h</includes>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00278.html</anchorfile>
      <anchor>d360245d9de9da3dd7ac886fe0d022f2</anchor>
      <arglist>(TurtleMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TurtleMobility.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>a00279</filename>
    <includes id="a00271" name="LineSegmentsMobilityBase.h" local="yes" imported="no">LineSegmentsMobilityBase.h</includes>
    <class kind="class">TurtleMobility</class>
  </compound>
  <compound kind="file">
    <name>Decider80211.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00280</filename>
    <includes id="a00281" name="Decider80211.h" local="yes" imported="no">Decider80211.h</includes>
    <includes id="a00284" name="DeciderResult80211.h" local="no" imported="no">DeciderResult80211.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider80211.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00281</filename>
    <includes id="a00179" name="BaseDecider.h" local="no" imported="no">BaseDecider.h</includes>
    <includes id="a00297" name="Consts80211.h" local="no" imported="no">Consts80211.h</includes>
    <class kind="class">Decider80211</class>
  </compound>
  <compound kind="file">
    <name>Decider80211Battery.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00282</filename>
    <includes id="a00283" name="Decider80211Battery.h" local="yes" imported="no">Decider80211Battery.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider80211Battery.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00283</filename>
    <includes id="a00281" name="Decider80211.h" local="yes" imported="no">Decider80211.h</includes>
    <class kind="class">Decider80211Battery</class>
  </compound>
  <compound kind="file">
    <name>DeciderResult80211.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00284</filename>
    <includes id="a00187" name="Decider.h" local="no" imported="no">Decider.h</includes>
    <class kind="class">DeciderResult80211</class>
  </compound>
  <compound kind="file">
    <name>PhyLayer.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00285</filename>
    <includes id="a00286" name="PhyLayer.h" local="yes" imported="no">PhyLayer.h</includes>
    <includes id="a00281" name="Decider80211.h" local="no" imported="no">Decider80211.h</includes>
    <includes id="a00247" name="SimplePathlossModel.h" local="no" imported="no">SimplePathlossModel.h</includes>
    <includes id="a00245" name="LogNormalShadowing.h" local="no" imported="no">LogNormalShadowing.h</includes>
    <includes id="a00290" name="SNRThresholdDecider.h" local="no" imported="no">SNRThresholdDecider.h</includes>
    <includes id="a00243" name="JakesFading.h" local="no" imported="no">JakesFading.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00285.html</anchorfile>
      <anchor>189859dc7a9fd5898aa29552896b1af7</anchor>
      <arglist>(PhyLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayer.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00286</filename>
    <includes id="a00181" name="BasePhyLayer.h" local="yes" imported="no">BasePhyLayer.h</includes>
    <class kind="class">PhyLayer</class>
  </compound>
  <compound kind="file">
    <name>PhyLayerBattery.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00287</filename>
    <includes id="a00288" name="PhyLayerBattery.h" local="yes" imported="no">PhyLayerBattery.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>bddb1f843e0b20b54d3e065867ad6bd7</anchor>
      <arglist>(PhyLayerBattery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayerBattery.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00288</filename>
    <includes id="a00286" name="PhyLayer.h" local="yes" imported="no">PhyLayer.h</includes>
    <includes id="a00283" name="Decider80211Battery.h" local="yes" imported="no">Decider80211Battery.h</includes>
    <includes id="a00220" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <class kind="class">PhyLayerBattery</class>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00289</filename>
    <includes id="a00290" name="SNRThresholdDecider.h" local="yes" imported="no">SNRThresholdDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>a00290</filename>
    <includes id="a00179" name="BaseDecider.h" local="no" imported="no">BaseDecider.h</includes>
    <class kind="class">SNRThresholdDecider</class>
  </compound>
  <compound kind="file">
    <name>BatteryState.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00291</filename>
    <includes id="a00170" name="BaseUtility.h" local="yes" imported="no">BaseUtility.h</includes>
    <class kind="class">BatteryState</class>
  </compound>
  <compound kind="file">
    <name>BatteryStats.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00292</filename>
    <includes id="a00293" name="BatteryStats.h" local="yes" imported="no">BatteryStats.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>86d86eb46f623b3c9a6b482036058ab9</anchor>
      <arglist>(BatteryStats)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BatteryStats.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00293</filename>
    <includes id="a00166" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="a00296" name="SimpleBattery.h" local="yes" imported="no">SimpleBattery.h</includes>
    <includes id="a00291" name="BatteryState.h" local="yes" imported="no">BatteryState.h</includes>
    <includes id="a00294" name="DeviceEntry.h" local="yes" imported="no">DeviceEntry.h</includes>
    <class kind="class">BatteryStats</class>
  </compound>
  <compound kind="file">
    <name>DeviceEntry.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00294</filename>
    <class kind="class">DeviceEntry</class>
  </compound>
  <compound kind="file">
    <name>SimpleBattery.cc</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00295</filename>
    <includes id="a00219" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="a00296" name="SimpleBattery.h" local="yes" imported="no">SimpleBattery.h</includes>
    <includes id="a00293" name="BatteryStats.h" local="yes" imported="no">BatteryStats.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a06407a20e92e656a25f20e754524de9</anchor>
      <arglist>(SimpleBattery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleBattery.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>a00296</filename>
    <includes id="a00158" name="BaseBattery.h" local="yes" imported="no">BaseBattery.h</includes>
    <includes id="a00291" name="BatteryState.h" local="yes" imported="no">BatteryState.h</includes>
    <includes id="a00220" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <includes id="a00294" name="DeviceEntry.h" local="yes" imported="no">DeviceEntry.h</includes>
    <class kind="class">SimpleBattery</class>
  </compound>
  <compound kind="file">
    <name>Consts80211.h</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/utility/</path>
    <filename>a00297</filename>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATES_80211</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>3e678fe3edd6e7ddf05112025f0362dd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>RED_PHY_HEADER_DURATION</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>7121f04d75dff0f763aca848c199088f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HEADER_LENGTH</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>1be276497de806411e2c5cc3b8d5d08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>HEADER_WITHOUT_PREAMBLE</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>478fe6b796ffdc77e63b77c4d447cf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATE_HEADER</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>0454abde1a622bc79c2528d728e466ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BANDWIDTH</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>007aaecac439a0b64fa29eef0da1d9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAC_GENERATOR</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>0c14cacca0c26f291b4c74a836e1dc81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAC80211_HEADER_LENGTH</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>7e14c9f344489ba48f9f6ad1ee865e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>LENGTH_RTS</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>51ede2d449cc2280250de6b6bfe78ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>LENGTH_CTS</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>0904361ff428ae58f8c790bef1cefb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>LENGTH_ACK</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>2cfa720fa65b7858c072e2f274f3cd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const const_simtime_t</type>
      <name>ST</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>ec0071eea60aae281dd371d97a3cc4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const const_simtime_t</type>
      <name>SIFS</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>51a9ec9ebf3d92c8137776db8f8442c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const const_simtime_t</type>
      <name>DIFS</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>cd77955cde6b5418987a7d26f7f49b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const const_simtime_t</type>
      <name>EIFS</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>55ea8f073a309c4bf3bb331b6a00a28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>LONG_RETRY_LIMIT</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>2bb160720063fb50dbd82ab9e847d24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>SHORT_RETRY_LIMIT</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>173b916179dfb4601b7dd270d68c49a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CW_MIN</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>59e6ff62126f031cb0c32b81338309c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CW_MAX</name>
      <anchorfile>a00297.html</anchorfile>
      <anchor>c6a8118f130ef76bd103d0d6e288099d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>applLayer</name>
    <title>applLayer - application layer modules</title>
    <filename>a00299.html</filename>
    <class kind="class">BaseApplLayer</class>
    <class kind="class">TestApplLayer</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">BurstApplLayer</class>
    <class kind="class">BurstApplLayerBattery</class>
  </compound>
  <compound kind="group">
    <name>netwLayer</name>
    <title>netwLayer - network layer modules</title>
    <filename>a00300.html</filename>
    <class kind="class">BaseArp</class>
    <class kind="class">BaseArpAccess</class>
    <class kind="class">BaseNetwLayer</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">NetwControlInfo</class>
  </compound>
  <compound kind="group">
    <name>nic</name>
    <title>nic - network interfaces</title>
    <filename>a00301.html</filename>
    <subgroup>macLayer</subgroup>
    <subgroup>phyLayer</subgroup>
  </compound>
  <compound kind="group">
    <name>macLayer</name>
    <title>macLayer - MAC layer modules</title>
    <filename>a00302.html</filename>
    <class kind="class">BaseMacLayer</class>
    <class kind="class">MacToPhyControlInfo</class>
    <class kind="class">MacToPhyInterface</class>
    <class kind="class">PhyToMacControlInfo</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">Mac80211</class>
    <class kind="class">CSMAMacLayer</class>
  </compound>
  <compound kind="group">
    <name>phyLayer</name>
    <title>phyLayer - physical layer modules</title>
    <filename>a00303.html</filename>
    <class kind="class">ChannelAccess</class>
    <class kind="class">BasePhyLayer</class>
    <class kind="class">ChannelInfo</class>
    <class kind="class">MacToPhyControlInfo</class>
    <class kind="class">MacToPhyInterface</class>
    <class kind="class">PhyToMacControlInfo</class>
    <class kind="class">RadioStateAnalogueModel</class>
    <class kind="class">Radio</class>
    <class kind="class">RSAMConstMappingIterator</class>
    <class kind="class">RSAMMapping</class>
    <class kind="class">Signal</class>
    <class kind="class">SamplePhyLayer</class>
    <class kind="class">PhyLayer</class>
    <subgroup>analogueModels</subgroup>
    <subgroup>decider</subgroup>
  </compound>
  <compound kind="group">
    <name>analogueModels</name>
    <title>analogueModels - AnalogueModel implementations</title>
    <filename>a00304.html</filename>
    <class kind="class">AnalogueModel</class>
    <class kind="class">RandomFreqTimeModel</class>
    <class kind="class">RandomFrequencyOnlyModel</class>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">JakesFading</class>
    <class kind="class">LogNormalShadowing</class>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimplePathlossModel</class>
  </compound>
  <compound kind="group">
    <name>decider</name>
    <title>decider - decider modules</title>
    <filename>a00305.html</filename>
    <class kind="class">BaseDecider</class>
    <class kind="class">ChannelState</class>
    <class kind="class">DeciderResult</class>
    <class kind="class">Decider</class>
    <class kind="class">DeciderToPhyInterface</class>
    <class kind="class">Decider80211</class>
    <class kind="class">Decider80211Battery</class>
    <class kind="class">DeciderResult80211</class>
    <class kind="class">PhyLayerBattery</class>
    <class kind="class">SNRThresholdDecider</class>
  </compound>
  <compound kind="group">
    <name>mobility</name>
    <title>mobility - modules handling the mobility of the hosts</title>
    <filename>a00306.html</filename>
    <class kind="class">BaseMobility</class>
    <class kind="class">ANSimMobility</class>
    <class kind="class">BonnMotionFile</class>
    <class kind="class">BonnMotionFileCache</class>
    <class kind="class">BonnMotionMobility</class>
    <class kind="class">CircleMobility</class>
    <class kind="class">ConstSpeedMobility</class>
    <class kind="class">LinearMobility</class>
    <class kind="class">LineSegmentsMobilityBase</class>
    <class kind="class">MassMobility</class>
    <class kind="class">RectangleMobility</class>
    <class kind="class">TractorMobility</class>
    <class kind="class">TurtleMobility</class>
  </compound>
  <compound kind="group">
    <name>utils</name>
    <title>utils  -  utiltity classes</title>
    <filename>a00307.html</filename>
    <class kind="class">Coord</class>
    <class kind="class">ModuleAccess</class>
    <class kind="class">FWMath</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">Move</class>
    <class kind="class">NetwControlInfo</class>
    <member kind="enumvalue">
      <name>L3BROADCAST</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b9366702cbd97be712e57f88b0ef4e8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L2BROADCAST</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b7f19df32f2804a6a4898283c48208a80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>base - base MiXiM modules</title>
    <filename>a00308.html</filename>
    <subgroup>baseModules</subgroup>
    <subgroup>blackboard</subgroup>
    <subgroup>connectionManager</subgroup>
    <subgroup>baseUtils</subgroup>
  </compound>
  <compound kind="group">
    <name>baseModules</name>
    <title>baseModules - base module classes of MiXiM</title>
    <filename>a00309.html</filename>
    <class kind="class">ChannelAccess</class>
    <class kind="class">BaseApplLayer</class>
    <class kind="class">BaseArp</class>
    <class kind="class">BaseArpAccess</class>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
    <class kind="class">BaseLayer</class>
    <class kind="class">BaseMacLayer</class>
    <class kind="class">BaseMobility</class>
    <class kind="class">BaseModule</class>
    <class kind="class">BaseNetwLayer</class>
    <class kind="class">BaseUtility</class>
    <class kind="class">BaseWorldUtility</class>
    <class kind="class">BatteryAccess</class>
    <class kind="class">BaseDecider</class>
    <class kind="class">BasePhyLayer</class>
  </compound>
  <compound kind="group">
    <name>blackboard</name>
    <title>BaseUtility - blackboard related stuff</title>
    <filename>a00310.html</filename>
    <class kind="class">BaseUtility</class>
    <class kind="class">HostState</class>
    <class kind="class">BBItem</class>
    <class kind="class">ImNotifiable</class>
    <class kind="class">Move</class>
    <class kind="class">BatteryState</class>
  </compound>
  <compound kind="group">
    <name>connectionManager</name>
    <title>connectionManager - channel and connection related classes</title>
    <filename>a00311.html</filename>
    <class kind="class">BaseConnectionManager</class>
    <class kind="class">ChannelAccess</class>
    <class kind="class">ConnectionManager</class>
    <class kind="class">NicEntry</class>
    <class kind="class">NicEntryDebug</class>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="group">
    <name>baseUtils</name>
    <title>baseUtils - utitities for base MiXiM</title>
    <filename>a00312.html</filename>
    <class kind="class">Coord</class>
    <class kind="class">FindModule</class>
    <class kind="class">ModuleAccess</class>
    <class kind="class">FWMath</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">Move</class>
    <class kind="class">NetwControlInfo</class>
  </compound>
  <compound kind="group">
    <name>mapping</name>
    <title>mapping - classes representing mathematical mappings</title>
    <filename>a00313.html</filename>
    <class kind="class">Dimension</class>
    <class kind="class">DimensionSet</class>
    <class kind="class">Argument</class>
    <class kind="class">NoNextIteratorException</class>
    <class kind="class">ConstMappingIterator</class>
    <class kind="class">ConstMapping</class>
    <class kind="class">MappingIterator</class>
    <class kind="class">Mapping</class>
    <class kind="class">SimpleConstMappingIterator</class>
    <class kind="class">SimpleConstMapping</class>
    <class kind="class">TimeMappingIterator</class>
    <class kind="class">TimeMapping</class>
    <class kind="class">ConstantSimpleConstMapping</class>
    <class kind="class">MultiDimMappingIterator</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">MappingUtils</class>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">SimplePathlossConstMapping</class>
    <subgroup>mappingDetails</subgroup>
  </compound>
  <compound kind="group">
    <name>mappingDetails</name>
    <title>mappingDetails - mostly internal mapping classes</title>
    <filename>a00314.html</filename>
    <class kind="class">Interpolated</class>
    <class kind="class">PairLess</class>
    <class kind="class">NextSmaller</class>
    <class kind="class">Nearest</class>
    <class kind="class">Linear</class>
    <class kind="class">ConstInterpolateableIterator</class>
    <class kind="class">InterpolateableIterator</class>
    <class kind="class">InterpolateableMap</class>
    <class kind="class">BaseFilteredIterator</class>
    <class kind="class">FilteredMappingIterator</class>
    <class kind="class">LinearIntplMappingIterator</class>
    <class kind="class">LinearIntplMapping</class>
    <class kind="class">Interpolated&lt; Mapping * &gt;</class>
    <class kind="class">Linear&lt; double, Mapping *, std::map&lt; double, Mapping * &gt;::value_type, std::map&lt; double, Mapping * &gt;::const_iterator &gt;</class>
    <class kind="class">ConstMappingIteratorWrapper</class>
    <class kind="class">ConstMappingWrapper</class>
    <class kind="class">FilledUpMappingIterator</class>
    <class kind="class">FilledUpMapping</class>
    <class kind="class">ConcatConstMappingIterator</class>
    <class kind="class">ConcatConstMapping</class>
    <class kind="class">BaseDelayedIterator</class>
    <class kind="class">BaseDelayedMapping</class>
    <class kind="class">ConstDelayedMapping</class>
    <class kind="class">DelayedMapping</class>
    <member kind="typedef">
      <type>BaseFilteredIterator&lt; ConstMappingIterator &gt;</type>
      <name>FilteredConstMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ga645dfa599e41183c494290d0abba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredConstMappingIterator, ConstMappingIterator &gt;</type>
      <name>ConstDelayedMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>g65c3da57807297c8c20a24d18e142051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredMappingIterator, MappingIterator &gt;</type>
      <name>DelayedMappingIterator</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>gf6d7bb3c43fe0bda97133e548ce327c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>examples</name>
    <title>examples - Classes for the examples of MiXiM</title>
    <filename>a00315.html</filename>
    <subgroup>exampleAM</subgroup>
    <subgroup>exampleCSMA</subgroup>
  </compound>
  <compound kind="group">
    <name>exampleAM</name>
    <title>AnalogueModels example - Classes from the AnalogueModels example</title>
    <filename>a00316.html</filename>
    <class kind="class">RandomFreqTimeModel</class>
    <class kind="class">RandomFrequencyOnlyModel</class>
    <class kind="class">SamplePhyLayer</class>
    <class kind="class">SimpleMacLayer</class>
    <class kind="class">ThresholdDecider</class>
  </compound>
  <compound kind="group">
    <name>exampleCSMA</name>
    <title>CSMAMac example - Classes from the CSMAMac example</title>
    <filename>a00317.html</filename>
    <class kind="class">SimpleNetwLayer</class>
  </compound>
  <compound kind="group">
    <name>power</name>
    <title>Power consumption - Classes using/defining power consumption</title>
    <filename>a00318.html</filename>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
    <class kind="class">BatteryAccess</class>
    <class kind="class">HostState</class>
    <class kind="class">Decider80211Battery</class>
    <class kind="class">PhyLayerBattery</class>
    <class kind="class">BatteryState</class>
    <class kind="class">BatteryStats</class>
    <class kind="class">DeviceEntry</class>
    <class kind="class">SimpleBattery</class>
  </compound>
  <compound kind="class">
    <name>AnalogueModel</name>
    <filename>a00001.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalogueModel</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>d67dc10e9889eb66fe7515280a00c97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>1e55713377ed6af8a7ed043168ff3957</anchor>
      <arglist>(Signal &amp;s)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANSimMobility</name>
    <filename>a00002.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>d93ced0c6aa653d8d4018f9ce95e61b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>297696a4c49833d685f3a79775079663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractDataFrom</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>39577e65116b0ec8f05c118710b5445b</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>63980e265c4bff8981b4c317386a60e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>e840aa686318c0ddafb17ac1e52c6021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextPosChange</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>cb9e3c0d4205bd3e3854a946c45c8cdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument</name>
    <filename>a00003.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; Dimension, double &gt; *</type>
      <name>iterator</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>8f9f37745f3e62a30366246aa37f4f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const std::pair&lt; Dimension, double &gt; *</type>
      <name>const_iterator</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>e74a4804e194dfd48d2c9737e6a9a9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>5040a41eabfb1adf230afa573f54e136</anchor>
      <arglist>(simtime_t timeVal=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>6364ba519046ac5f3f5cb05b9e784233</anchor>
      <arglist>(const DimensionSet &amp;dims, simtime_t timeVal=0)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTime</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>dbec5c48c3c1e79057864dd50260d990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>1aa26affcd0355edb44cd9711ad6fa55</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasArgVal</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>c4be03e7f538c9c274252e54b1abdfec</anchor>
      <arglist>(const Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getArgValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>d0cc05a99e89e4045d50aaaaddc15a22</anchor>
      <arglist>(const Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>31613629e82ee853b4295bbee80772d1</anchor>
      <arglist>(const Dimension &amp;dim, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValues</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>72ac36c91caaeb8f34eb091abff19c51</anchor>
      <arglist>(const Argument &amp;o, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamePosition</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>c69b6722244626cdf4e0a006c9822cec</anchor>
      <arglist>(const Argument &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>fedad9de51d93e634baa82f1152d7155</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClose</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6c37fe49df4ecf089abe0215c7d0070</anchor>
      <arglist>(const Argument &amp;o, double epsilon=0.000001) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>20805e35e4f766088dccfa2bbd8faf03</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compare</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ec3fe4105b3ad625f584961e7ab8062d</anchor>
      <arglist>(const Argument &amp;o, const DimensionSet &amp;dims) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionSet</type>
      <name>getDimensions</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>8b3fcda23d2eec4e931126d261e4b194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5470d1af397ea8da8be60594981a0b0</anchor>
      <arglist>(const Argument &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>f0e836fd4aaecc1461b994e21f66ddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>493bcd3b014d9bc09f5b0a5093797136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>eeb6730c20ae8a8d6c9606f2e03cc1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>839f872b871bcce52fa4179b0e8ee0a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ec9c03a05a1808bf4bbb4aedac80c661</anchor>
      <arglist>(const Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>d2d7b83f61bfb9c3e3b66ae162860aa9</anchor>
      <arglist>(const Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>15c150f3ecfb7499bfc184ee850ac3c7</anchor>
      <arglist>(const Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>29834061fd9ece4e06df819dee66d71f</anchor>
      <arglist>(const Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>insertValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>1d0ba15aa49c645421609dbc3fd9833e</anchor>
      <arglist>(iterator pos, const Dimension &amp;dim, double value, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>69cba55a3a7e1414ba8edde37796d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; Dimension, double &gt;</type>
      <name>values</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>802d908ce43c604ba47ba7c2a0812ebb</anchor>
      <arglist>[10]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>7d540f979029caa02b04e8bdcc324be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>7eb8c897281544d904f4a45de93a5cf9</anchor>
      <arglist>(std::ostream &amp;out, const Argument &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseApplLayer</name>
    <filename>a00004.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseApplMessageKinds</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>e0d47602558bc21ad258c06cf11f4361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>e0d47602558bc21ad258c06cf11f4361366d211a4409475c5bc2a1193033d8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseApplControlKinds</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>78a7344b6587fdf1c02e299b156825d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>78a7344b6587fdf1c02e299b156825d95bfff2f2b6be2fc6599387eebaebb944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a3ebaf5d1d1bdbec4648b07f65eb4145</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>4ac31a77107c19d518362af3548c9d77</anchor>
      <arglist>(cMessage *, simtime_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const int</type>
      <name>myApplAddr</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>46a40be81e2a89684f5ecc2f6b472978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ba8356197b089f23dd9c19b6b7937dab</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>448cd52ea7a441a8f2edb3794a59205b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>581ca398f2066910d8d10676e90d206b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>29c15eb83ed7749c838c005a3fb554d4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>823ae7127366be3fa2e11c98ace537b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>b42918350289ee246b194a5ab5e18d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseArp</name>
    <filename>a00005.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>424a847f259dbde5a83aa7c30a3a32bd</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>135cde8c1da09de4f40172e4624d771b</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMacAddr</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>9d8151470f2cf56cf6b4b976cf41d06a</anchor>
      <arglist>(const int netwAddr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNetwAddr</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>454f0cf1a5ee754cf1133cce13306e9e</anchor>
      <arglist>(const int macAddr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>myMacAddr</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>5917debc580744b1a807024720a85f0f</anchor>
      <arglist>(cModule *mac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>myNetwAddr</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>1a8544ba2ba0d786f9f98043c011acc0</anchor>
      <arglist>(cModule *netw)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>20ca05db31d80a36c5b0263b6ead1a1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseArpAccess</name>
    <filename>a00006.html</filename>
    <base>ModuleAccess&lt; BaseArp &gt;</base>
    <member kind="function">
      <type></type>
      <name>BaseArpAccess</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>8d3d1cfb5dab94bb08eb61b6f764696e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseBattery</name>
    <filename>a00007.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>6b2ac07e8d11823bdd239de2bfa4563a</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>4ac1773aef7363fc880a9689706ccc99</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int account)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8e14708d137cdff8cc15b5e593827f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>6a290653c4ce498fcbbd45425a657d02</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>3059d676a93806c8bb64798668e084d7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager</name>
    <filename>a00008.html</filename>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseConnectionManager</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a82c4d9b87d1c1776300fa47d82a5e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>046d0df64848f1932ac1580be9d5306f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>0d39342f1e732ad44ef7e4e2dccac24f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>b9d82c54244e022ee41f3d1017cd74f1</anchor>
      <arglist>(cModule *nic, ChannelAccess *chAccess, const Coord *nicPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>075ad308e1ae744f4f7ff1d6517da324</anchor>
      <arglist>(int nicID, const Coord *newPos)</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4baad102bae37527d07559d2f440ea5</anchor>
      <arglist>(int nicID)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>0a9ce7745e07ee9b812ebd7b5519dc00</anchor>
      <arglist>(const NicEntry *nic, const NicEntry *targetNic)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>950a318de5a93b437a1dc5872e6b9cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>07e3ba99630593a0b453056767f3c419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>332ff3a0e07c412efaaa2332b00b1c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicMatrix &gt;</type>
      <name>NicCube</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>6b43342fe2608cb862e03c07cf9f799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>00b2487d2565c70a46101964a2767643</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNicExt</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>6851b0f5e82df7cfd187c283faf0eca5</anchor>
      <arglist>(int nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>997a62d3bc3ca2d220a36609e4b7f4e5</anchor>
      <arglist>(int nicID, const Coord *oldPos, const Coord *newPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicEntries</type>
      <name>nics</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>9e2d47a851899da506730fcdda24030e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>6b75c5b6311b76e4894d669524a15043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>cdfe4a6c7e4d6cfc729219946488a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord *</type>
      <name>playgroundSize</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>b68d40f806cce405a8e97958f1245303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>1570049e688ff532c2454fce2ef02f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9b0c739744c1eafd365add0afe4a037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>de8a5353ad5be39ebb3830e45ec64fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicCube</type>
      <name>nicGrid</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>4d9992e134da9af1d9b90deba1d7759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>findDistance</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6721dc09184541734aebf11e1827a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridCoord</type>
      <name>gridDim</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>fea80604515a28ff8a6a1d07b9b0a9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNicConnections</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>0b847d1e04401fd6b9ec6472b6e6eaf7</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>063c137e5a6d73ff846321b511d48a32</anchor>
      <arglist>(GridCoord &amp;oldCell, GridCoord &amp;newCell, int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GridCoord</type>
      <name>getCellForCoordinate</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>7f0e7ff7533bb1f5e3c9bb2c2c0db261</anchor>
      <arglist>(const Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NicEntries &amp;</type>
      <name>getCellEntries</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>e776ac81a8f88a9afba710afaf8573b8</anchor>
      <arglist>(GridCoord &amp;cell)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wrapIfTorus</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>77e53c22a7c607482398632b85396a6c</anchor>
      <arglist>(int value, int max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillUnionWithNeighbors</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>9b524c0f46ec4bb2ade902ac0855cac5</anchor>
      <arglist>(CoordSet &amp;gridUnion, GridCoord cell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::CoordSet</name>
    <filename>a00009.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordSet</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>fee6bf1dd8528d274543c93791c18148</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordSet</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>49938b520176111bb4f28ad723406e81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>7004279d02f976e4fba0aeab475baba1</anchor>
      <arglist>(const GridCoord &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>GridCoord *</type>
      <name>next</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>5ce88ba4ae1f149a6b941b2b88a83ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>7777417092e5b4ce82d325d9207b0467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getmaxSize</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>d516ab3d80669813f89e9b1f24f78bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>142e375c8ed165cf9b228e9befa7588e</anchor>
      <arglist>(const GridCoord &amp;c, unsigned pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GridCoord * &gt;</type>
      <name>data</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>b28fd2a5eaf1eb43f6249adc530986c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxSize</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>746cf4d280b2f2ae83977cd619111335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>0b68b62c60dfabdebbefe3ab58edd63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>current</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>425a3e6913b8e7710a5bb89c1c07db4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::GridCoord</name>
    <filename>a00010.html</filename>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>61509129ee151dfce0f8cb538af4e968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>f573d2d1f61f633253bd46fff0d1e386</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>6b11ba91900ba0fddfead0938316a324</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>1108bfe594bab40387f5d30a40381414</anchor>
      <arglist>(const GridCoord &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>d9ffdc0bb2f144e436c4974d93bb21ed</anchor>
      <arglist>(const Coord &amp;c, double gridCellWidth=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>bad5f078a8579992400aac1487e2e525</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GridCoord</type>
      <name>operator=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>5c56d9ce42ebecd0dbe4294ba61cfa2e</anchor>
      <arglist>(const GridCoord &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>8aa2e54f02735a87f7b37df647c921f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>0881ac49ecd0eebe051f40e94bd27e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>426aee66c92c47e75d41b43cc5616916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5137873548b9d04de0fa9cc755a88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>UNDEFINED</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>c74b8d77dd42f06110332d99eeb38eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>2b7b149e4419a68dad34a9558f5c3c31</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>8b6fb213ce1ee286ec6c894b7b22cfa5</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDecider</name>
    <filename>a00011.html</filename>
    <base>Decider</base>
    <member kind="function">
      <type></type>
      <name>BaseDecider</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>cff4618fa7a9c2e9abf257e60e487de2</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDecider</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>486cd5548e3f75deff4dc9e3bd52fbb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>273892d7b0c9874e4efe3c7755aa7a17</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>f471a55749109aacb99429b409ccb9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>fd31e5a65d1798d329ace9bdbec25d64</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="enumeration">
      <name>SignalState</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>e4acbca8f960e9c49379ae2a82e2d90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>e4acbca8f960e9c49379ae2a82e2d90b3276f47da7417662597b21ee3afa2d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPECT_HEADER</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>e4acbca8f960e9c49379ae2a82e2d90bf0a66719215a9be8335546666facaab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPECT_END</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>e4acbca8f960e9c49379ae2a82e2d90b5539b8e545c0676dab0b0efb80dfeeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; AirFrame *, int &gt;</type>
      <name>ReceivedSignal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>4b3ede0e569c778173b7e430d958f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; ChannelSenseRequest *, simtime_t &gt;</type>
      <name>CSRInfo</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>cf6221fc304163856f01b71710922cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>6a480f87157d0509c0c1fccf94ea9fef</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>d931e0965c66fef10c9407d4abecbaf5</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>b9cfef6c04e12d2524d45e881f341300</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processUnknownSignal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>8a84e9ec29da8ec490d94dd7e68a6b04</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSignalState</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a41d7cb370ba4069108ede77732b3bc8</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleNewSenseRequest</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>1dba383c238fba606279ef483b435f78</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSenseRequestTimeout</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>04331dd4b050ca2bc431254a15eee174</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>e535b44e34061014fe282c36c27b0193</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canAnswerCSR</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>685497c4babb03a50b8967fb7505acc0</anchor>
      <arglist>(const CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>f326e85e885a64d5deea135dc4bcdb85</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>b8e925001d1f8630338c50f8ec10bb0d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateSnrMapping</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>bac709d59f48d292f147919854c002e2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateRSSIMapping</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>11e802adb6060617d7357d308d3b2cdb</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *exclude=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>5eece8bf532f92912ccbd0a3bc4d6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReceivedSignal</type>
      <name>currentSignal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>22e578e992fab5ab54fe5fcdf196d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isChannelIdle</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>535bb5ab48036db02bed8fcf5c4e415d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CSRInfo</type>
      <name>currentChannelSenseRequest</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>c6cd60e58a8a557ed511f8193ced4f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>33e7f02028e78116193d09d6cdbc987e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a22cd5156240713e37578172ba5557ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedIterator</name>
    <filename>a00012.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedIterator</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>1966a41043fb17240b05df96cfa6133c</anchor>
      <arglist>(Iterator *it, simtime_t delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedIterator</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>8e625392d1c0358b482f54d87ffb5887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>b5238914bcef66527dd7a8ecb951d5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a0c12e487930b671c16e697782c4fcf3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>46a0da319b981b94d0c6e2bf73d0e28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>bc9b1227759ade39f70bde566d7ca596</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>0f4e26de87701b0d5522101c6161c568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>7315a6ec3aa9f6267fd84e207c9e09f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>undelayPosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>dc48153655a44a6cb038437df65dd8d8</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>2f79592eaa15f47a5c2758572ed58ce0</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>13b0a9510f63d62886e3359f5f1bcdb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>59687f9e8e1cf20dee889ade67390f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>3062c1ea41e22ca984d5fd0d9d50dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>365d9f953c4c0951a3e19f7c219d67ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedMapping</name>
    <filename>a00013.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>8a361f25bb00ed5d368d392d118a3d57</anchor>
      <arglist>(Base *mapping, simtime_t delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>d6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>3043a2eac9aff36800a3d6fc2669bcbc</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>57f1d6488b87dd6d94cef520a7274a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>05b8a94e7a50e6a72b72ed675df48791</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aefe36c435a47643a5a723a81afaa0cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>0737bef944b4f0770521e6239a0ecdee</anchor>
      <arglist>(simtime_t d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>mapping</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseFilteredIterator</name>
    <filename>a00014.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(Base *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseFilteredIterator</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ea198a80ef62879176936c11a1d677d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>bbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>5cc47ec9becc03e67e2c6eeae2d4c984</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>origIterator</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseLayer</name>
    <filename>a00016.html</filename>
    <base>BatteryAccess</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>70f5ea30a9980d57b8384faed29ec3eb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>8039dac8d02052c97c1fcc209910fdde</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>5ab11502dbeeea89693d29841376a2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseLayer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>0197900f0ab83323a623448fc4e8b239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>87d7e1e5aa73216f07e35d7be4358924</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>8c0fcfb2e806357a65d5bdb1c338627b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>5ca2278405070baa474dfbf059930247</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a37925527fae20a5de1a755103056219</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>b412568faae75040194e01d5e541dd67</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>dbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>doStats</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>f20218f97a82a544a6f7c4316b5486d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catPassedMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ef0f20a7d27c6f6af97b4d04721ce4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PassedMessage *</type>
      <name>passedMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>df7be46c3b45429ae7e45c466202eebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>9377542e2efeb2cfdd53f54c1ddca418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperGateIn</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>8a3984579f72a44847e70009fd184180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperGateOut</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>98085c0f424ef86e2c7e1a1abe3d0cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerGateIn</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>0d76b53f4d69d3d6e58e0b50a84c9200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerGateOut</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>82e7427443b7c2496e36220830d8bdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ba75bba311458c62b4b2fa2bb9711a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>5e0a6cb17bfc2fd3127ac884d0e9d3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>1d2eb99059680b97b366ae8342f18af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>380159410191c5ea0e5f95766a4814dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMacLayer</name>
    <filename>a00017.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseMacMessageKinds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>8f1f4f485d6548964c1f1cbd75d1d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>8f1f4f485d6548964c1f1cbd75d1d9c70e31be8e59c319e75d7a9858ff984a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseMacControlKinds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>49e0e548a6c20d002bd67afa7b76c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>49e0e548a6c20d002bd67afa7b76c4835e5e0e55f7cc75b0d8bad06a212371f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>49e0e548a6c20d002bd67afa7b76c483debf9c77bbe6f19772866cccbef0fe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>49e0e548a6c20d002bd67afa7b76c483914b2cf7aab4597589adb15d8fec8b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>61c82dc3b225eac37f7fa9936c28c2c3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>6de2ca07018de313a7147a03e6d77bff</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>413375cec02b990a521b62086a02264c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>95ce03241a7dd66baa693607a74eca07</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>796d456d593dfab3188b37e506dd76a8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>4a1a81a79e239a0724f3b06d9f18c505</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>b5c40c53eda6e5a5041bddebfab6e0b6</anchor>
      <arglist>(MacPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>32d47cbd6940c09071e0f0e777cf6716</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Signal *</type>
      <name>createSignal</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>8815bb8f7fdd9e341819fb62d8141bad</anchor>
      <arglist>(simtime_t start, simtime_t length, double power, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createConstantMapping</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>56b3703e59f8c10328b6a2436e197654</anchor>
      <arglist>(simtime_t start, simtime_t end, double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstMapping *</type>
      <name>createSingleFrequencyMapping</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>c534461d74773d51a9507b2a2809f4d9</anchor>
      <arglist>(simtime_t start, simtime_t end, double centerFreq, double bandWith, double value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7b1e6bdb734765a9f4eff7d486dfbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>8c275aa0a523808a89d2e45ade46ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddr</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>b4c8f97d540fc49277ab3a08e41a0c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>b3111737703e0d4b5198478fb1f75e60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMobility</name>
    <filename>a00018.html</filename>
    <base>BatteryAccess</base>
    <member kind="enumeration">
      <name>BorderPolicy</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b98fb8c368f0440f799b286082ab9692</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b98fb8c368f0440f799b286082ab9692829b74c4a43c1dcf653cefb1f013442c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b98fb8c368f0440f799b286082ab9692a1e7cff6cab8bb2e5377954240e5e9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b98fb8c368f0440f799b286082ab9692ba3a649e4ab9c49d2ba504eb267d6883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b98fb8c368f0440f799b286082ab96928e407aa7afa91b56f22fa0288cf64800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseMobilityMsgKinds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>4ff5688fe27813f0b48fbaaca7f77320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_HOST</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>4ff5688fe27813f0b48fbaaca7f773209b0e54a8ea2af0056ca7f6e3adf124d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_TO_BORDER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>4ff5688fe27813f0b48fbaaca7f773206b9f8a418aa568c2fbb42a631395edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MOBILITY_KIND</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>4ff5688fe27813f0b48fbaaca7f77320f70de9be1467bc9627cb6087220ec40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BorderHandling</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOWHERE</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c1853b2e0d3f99c2f6d055d42f0232ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_SMALLER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c1d18e65d34ff94919ea9852c030d623f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_BIGGER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c1702032487f04b9f8175057934fa4c095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_SMALLER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c17bc26c24e4f04e88bba2e6c1301ee80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_BIGGER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c1f063b05510ed72bec2922676d5622ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_SMALLER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c19f9d36e258d30fc681cac3086bcfd5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_BIGGER</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9aa47015075d3e3caecd69a88ffe4c159d4a5a1d81e57d64160a91dfc051e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ad7ebb839ae5726f97ccf149ae661333</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a89e41596faff0067340643acbab27d0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>342341f600bd2ebdbe9f39b0c44f12f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>70b2b357a4cef14850cd4edd440a13a7</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBorderMsg</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>1cd10753592e8eeb018d8f774ce862c6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>9774524fd5f2d3ef348dc67f2af0f491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>291eed23c07d4693a5fa4164aa80934e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>fd83457f242d92ccdc2e2b5a3b2c4dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>09941dabdb81e67c77fc4794167c9351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeZ</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>1245dec457a2d33c8dd1a70ccd74ea33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>8fa3e89fe9d550dfd95c341fcaa77e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ae36006995d117a723134cbe1fee5e90</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>cf49d9a33d055f987e4d978af8e3a30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b69f42caa7932524bf470f0799b4aac7</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>3bf65a049293dc4c7043554c04555bdc</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectCoordinate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>6c817348be2c3586777a85bb60e2b3f1</anchor>
      <arglist>(BorderHandling border, Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b9e4cd0caa3fc245ba934f5f5bd9fc49</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>78f392149c0f8185e07dc9a51286bf85</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>933475f97d6ab7bf834e4d07beda131b</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>6622a6eae6f6fb4bc2511a9f2d7f0593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>hostPtr</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>780558b8cfd678171a20d4eed3adec16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>c663b084a01319c8a0280b4c71abc773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>move</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>1034fe1aa236bfa5bc2ae4adf3de8da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>moveCategory</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>9e33af2ae08a4ebb8423bdeb49b59ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>f3cdd1192cfb8e70e53f36d03a20f1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveMsg</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>b4535d31d36713218b22de49a1ecb2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>eb7ee6624bec58357e8fae54859c76c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseModule</name>
    <filename>a00019.html</filename>
    <base>ImNotifiable</base>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>32a85543320f15e3852fc15201acd492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>03030e439aaf030c83da6e71e8be2f80</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ce4692f0eb43b2d4ca4e46f81b5c77a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>27cef13e3c28ce00c79c0a75a3aa36a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getNode</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>99a4640c49208ce4f3469676ceb7a219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>3dd317df0fd9db2fa074c519471bfeb3</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>44220aa650488eee8ad121f8bc599265</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchHostState</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>2edf4477674604a8c2eb2b95e952694a</anchor>
      <arglist>(HostState::States state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>findHost</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abf0226159b22b46e70031fd3bb3b1b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getLogName</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>980026c107039bc5b571e2a46568b734</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseUtility *</type>
      <name>utility</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>3f177bbac706fb0113555679dc7c4500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>f32711ea117b066fcd10081a17bb81d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notAffectedByHostState</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>d2e5c785ee5b988e624a11a9b80e2bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostStateCat</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>b5c34173138b2b2fdb091c79473effd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>662f36472ead049d2e1c70409fd08242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseNetwLayer</name>
    <filename>a00020.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseNetwMessageKinds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>e9b454fb23adb3ba3d2fe487f507ffab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_NETW_MESSAGE_KIND</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>e9b454fb23adb3ba3d2fe487f507ffab0739a621763c662b0064f1f92644ae05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseNetwControlKinds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ca717c433c9975c6cbbc8f3ec8ce8af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_NETW_CONTROL_KIND</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ca717c433c9975c6cbbc8f3ec8ce8af49d1de6d232d7ba06347a8c4f77477b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>1e521b5549bfe29ae94d95265c0fe8d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ddca7d4968a09f46dcfc2da9737e2f8e</anchor>
      <arglist>(NetwPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NetwPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>b3da21cae2c9e90d48534f064893ed4a</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>0b473fbb2517ac7b0c633afdb002c269</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>58afc64e0a96fe4d80d6b9f53cfd53c6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>758f0a0b17aec922758173e19624f212</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>478dcd88ab7a82412deb8075afe61278</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>5265eb248cc3660c862444a3591f0ec2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>9b802bd94a739e6202690d743ecc83a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseArp *</type>
      <name>arp</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4c224bf9a1185097d2558f17639620c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNetwAddr</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>b1415ba246faecc09ac82aac5b01442c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasePhyLayer</name>
    <filename>a00021.html</filename>
    <base>ChannelAccess</base>
    <base>DeciderToPhyInterface</base>
    <base>MacToPhyInterface</base>
    <member kind="function">
      <type></type>
      <name>BasePhyLayer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>6b1702943ae38fac8dcfd82afd0424f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePhyLayer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>0fc69907490ed2752d2a888ef26348ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>905b025f39422a9ec57b9349ad36269c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>5170b3aadae25dc6b9e61974076be04b</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>7620c7de01e2dede5a68f13fda69e0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>089a1287c5f3812215ef9ac8dfe984e3</anchor>
      <arglist>(simtime_t from, simtime_t to, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>116b328e70419037bb72e270c8d47bb9</anchor>
      <arglist>(simtime_t from, simtime_t to)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendControlMsg</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>62e88e82937e0ef2b9d4adf46061ec00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>0e9f0ccf4ed1d8377aa3f00b931a3e71</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>c2dce47fd96bb69e24977a7cd5f67a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a4c75db0828cf579907b1e9a9c683e99</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>81153199f268b4831f42b20b06959764</anchor>
      <arglist>(double amount, int activity)</arglist>
    </member>
    <member kind="enumeration">
      <name>AirFrameStates</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1333b977d8e274e32b80a4b300c96bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>START_RECEIVE</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1333b977d8e274e32b80a4b300c96bc1a0cb17278ea70e7e327de30aad32e0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECEIVING</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1333b977d8e274e32b80a4b300c96bc12900d4f5f03ec09b83e5c24744924755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_RECEIVE</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1333b977d8e274e32b80a4b300c96bc18c8f8a59dc873e035f19750598ceb157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AnalogueModel * &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>c8dca20c727bdb1494d97da1c64bb55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>f29abf3259af16b051ce48b0db7a64c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>08704deaf03b73c8eda67cc60e670853</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>3880154c8db8b8efb5315cb6ef8f6c41</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>419df7f53684ee758de1dcabb959e10f</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>095d1b5fd25b9ada3ac86d3c9237c3f8</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>8d65e4a85336642f234bf0b1172336dc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>6866e3f79df84cdb5550a51d6502463f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameFirstReceive</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>d0e987003f09275647a060e8a72cc5fa</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>671f083680882230b754b7e9578e6274</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>9dbbcf0004b22c622ec4b06a19b4f564</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>4f8fde562c0004b498fc3294c3f54c2f</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>f5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1fe847ed3e50ccf3a3740234dfee42b1</anchor>
      <arglist>(AirFrame *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>7ac9dcc2ca7a8d140ddded4e9f1b37f0</anchor>
      <arglist>(cMessage *msg, simtime_t time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1e42622259807fe3cf06935e7a818ccf</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>51940490b6927a6976b53b9f5c2178d4</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>da6c556e50ead146f822dadf6ea2a472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>thermalNoise</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>fedc2cd6f80601fb040b56256e6cc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTXPower</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>80fe7028b2fbf92f61dd30b79e30a86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>7eaa041636b623066b5abd87a38afa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelInfo</type>
      <name>channelInfo</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>38d35bc99079eff49deb6c870b1175e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Radio *</type>
      <name>radio</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>6aefa7200582ec18d6ac5f8f8092a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider *</type>
      <name>decider</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>5be00b3a133596d8ed78a9f8e38973d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModels</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>bc00fc5777ef641f72b5a4d85bf65c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperGateIn</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>31262af527f17ed1a41d70f616f2aa08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperGateOut</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>0643f7dce4e8aa1b8490b11ba176a38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ca9b66970dd836cc696dd0907c58598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>b58c7430371f1ba135e0a641d150c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>radioSwitchingOverTimer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>c28de586b21162c377a180233299a1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>2ce22bc20ab469e99352958face5468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>48f5fc0fe990ee5dbe31911437a586f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>d1de573273df163a5fc2b8b537c65e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getParametersFromXML</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a89a9272b99ab3005347301c2effc254</anchor>
      <arglist>(cXMLElement *xmlData, ParameterMap &amp;outputMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAnalogueModels</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>8ea7353793eed2f1a7b0cd1caacd72e9</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDecider</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>9da4f8ffaa373a0de7895cbea524816b</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>T</type>
      <name>readPar</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>1fb6d85cc9a8de0c1ff8393e1541f53e</anchor>
      <arglist>(const char *parName, const T defaultValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseUtility</name>
    <filename>a00022.html</filename>
    <base>ImNotifiable</base>
    <class kind="class">BaseUtility::Subscriber</class>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>09c076194987b054b8ee6076b81b9336</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>869c930fffedc7db68e652581f5869ce</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPos</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ff0713c77210bd7a8d2dc4e55977a893</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HostState &amp;</type>
      <name>getHostState</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>b7d9e59bf49cdfffe34ba0e53e38c76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>888ed3ecf5f55c680c85d4ba53624f0b</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseUtility</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>d57e8529a82be647510a942e31230785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>35d03c7a123ca24f80b732d67ba1e31a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subscribe</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>15085a1024ff661074352fe3a7ab2ac6</anchor>
      <arglist>(ImNotifiable *client, const BBItem *category, int scopeModuleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subscribe</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>7498f88c493f269537b61df403ccb920</anchor>
      <arglist>(ImNotifiable *client, int category, int scopeModuleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>711ade8bf44aeb86ac3fbc22f1932b33</anchor>
      <arglist>(ImNotifiable *client, int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publishBBItem</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>f3e375a774329f553ddc670b737443a5</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCategory</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>d8ed51fa1714dcdce0b294e6e3c74408</anchor>
      <arglist>(const BBItem *details)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Subscriber &gt;</type>
      <name>SubscriberVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>fafedb60f355bd4ed2162221d3adf4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; SubscriberVector &gt;</type>
      <name>ClientVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>9896292dd411ab2949d08429b6e690e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; const char * &gt;</type>
      <name>CategoryDescriptions</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>79250811aedd7d76634be0aa42310f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>ParentVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>3bed030811bc98d8cca43604b12d2b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ClientVector::iterator</type>
      <name>ClientVectorIter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aee0161f568ecf6b038c150b8f5791c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CategoryDescriptions::iterator</type>
      <name>DescriptionsIter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>81a4b9a20625eade5d6c7425587f6f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ParentVector::iterator</type>
      <name>ParentVectorIter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>2810830f64f4f7798c03919dc1deaa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>findHost</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>b15a8f8aecd710865f3c1b5d19a8c630</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>categoryName</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>2ddb7de31d6e1abbde2ee4eeae689b7f</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findAndCreateDescription</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ec82cb8e6eaae844c4e9bedc2a899700</anchor>
      <arglist>(bool *isNewEntry, const BBItem *category)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillParentVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>03750e7d90227da3706664466e16514d</anchor>
      <arglist>(const BBItem *category, int cat)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientVector</type>
      <name>clientVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>9407b9a98a825c1556392ec181d5b2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CategoryDescriptions</type>
      <name>categoryDescriptions</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>adc937c8dc88cf1f6e1906e5db292932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParentVector</type>
      <name>parentVector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>89c073aa186652a6a79524705e36d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextCategory</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>6b9f3907ab79dc7a09635c6997d66386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catMove</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>9f343d30d7a2d07cdd94decb2373fd6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catHostState</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>082e58bef27e919c87961d1f51ca2eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostState</type>
      <name>hostState</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>f6be200acd5124414f6e52bbd6dee8ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>eec15bd75df68ead143f852341d47a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>e4427b4336a7d9c488bb40d6022f948d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>d8fa255f3e94644cd28c93eaf03b8858</anchor>
      <arglist>(std::ostream &amp;, const SubscriberVector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseUtility::Subscriber</name>
    <filename>a00023.html</filename>
    <member kind="function">
      <type></type>
      <name>Subscriber</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>55d2555060781f62bb80ce7a688ac4f2</anchor>
      <arglist>(ImNotifiable *c=0, int b=-1)</arglist>
    </member>
    <member kind="variable">
      <type>ImNotifiable *</type>
      <name>client</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>f3b5d97cdbb0c97db2a298384356cfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>scopeModuleId</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>19373d8ee0420c0539aa2e8c7906ff9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWorldUtility</name>
    <filename>a00024.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>08cd184861fa214245ba5c9928e5aefc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>59856aa0ec27f134bf8f0acb379433af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>179c8bf9d4613cbb1af0a85d779827a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>37a1abb90a220afdaf6dbdab58299e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>3c574ecd7a055ba2407f638ce548bc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>84c3d488e01d52be51c686e3fb206498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getUniqueAirFrameId</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>1c955c6c60dfa5b46a2bf683a20a84fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>84d040f815027b3098451b02733ac63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>74ba640d810a03334770d1f150fe1da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorusFlag</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a906ac76b1c5b51f6743104b532ed4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>bc092a88c21ecc008a7a32bc311201e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>airFrameId</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>490427de9d083bd510a4370002f70716</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryAccess</name>
    <filename>a00025.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>91a34707835f0938bc9c1a1c470ad5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerWithBattery</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>2286e83003b2919cbb496260a5b0d009</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>draw</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>1015e11ad7fc73f62a37e395bf686015</anchor>
      <arglist>(DrawAmount &amp;amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawCurrent</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>f62a4c6ab659f7bebc16cc789c559bc6</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawEnergy</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>603868d7ae89b65da4af161c9470f07f</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseBattery *</type>
      <name>battery</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>207a20e8fc1be11f6ff74674ca3f86f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deviceID</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>e09a5846f8e1cf1b6e8bc57b1470b18b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryState</name>
    <filename>a00026.html</filename>
    <base>BBItem</base>
    <member kind="function">
      <type></type>
      <name>BatteryState</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>e670927fcf61d4747da036db42a4a10a</anchor>
      <arglist>(double n=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRel</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aaacc811d07db14a871acadf438e1685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbs</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>1da8df3aab646db06c6341fb48efcfe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa9af946d2a8a122b13d9eb16e97fc15</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>36ff9183e3c338cedef736514ffba096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominal</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>035f6edba77666695304d885fab6612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absolute</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ebcd9c40f472c24575a8987dcfcf612b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>0f56e79ccdabbd32353d64cb1f2e323d</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryStats</name>
    <filename>a00027.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>07bebc9788ff9ec28a8b4d3d1473d977</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a5991c9ecc71e069e42f0496e5a1c37f</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>3777b2586a6992988605736316be4af7</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>07c69e80cfcfe2df2d90f3bbbcaa7493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>summary</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>2af14cff9c5dc3f5d2ad4d066f7deeec</anchor>
      <arglist>(double, double, simtime_t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>detail</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>31c95e6436f6ccf3d8b62174d514b557</anchor>
      <arglist>(DeviceEntry *, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>doDetail</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>03ac20b06dbccee77e65191265682eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>doTimeSeries</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aee44a254a029ec3ef5500c46ceb53dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>batteryCat</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ae6c51e1e49f2f894f37701d107371e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualVec</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>0743e048cf348ccb088f7fe63ce5eaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>relativeVec</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>64567e581be22366087716a23f4d9d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>estimateVec</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>1c3254ee8dbc2c51c58598aa5fe208c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>estimateRelVec</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>7b1d7fe230c0aa033926faf32dbcc4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleBattery *</type>
      <name>battery</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>4882723227db71327e8be1720825aa61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BBItem</name>
    <filename>a00028.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItem *</type>
      <name>parentObject</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>634d9d3b8527c5107d870c31893603c5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFile</name>
    <filename>a00029.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>8d0cd61f5b1284cbffd827c179d60ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Line *</type>
      <name>getLine</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>53dd2337b7b1809751fca2a828a11665</anchor>
      <arglist>(int nodeId) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Line &gt;</type>
      <name>LineList</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>07effbbc07901ec6bf284331f592a61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LineList</type>
      <name>lines</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>64119f4470afc52e4d8ccb74d96e2023</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BonnMotionFileCache</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>d131800aaf23bcc613f26a3ae6bde111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFileCache</name>
    <filename>a00030.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const BonnMotionFile *</type>
      <name>getFile</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>cd2a73b9199e01b31db26ec817604b8b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>getInstance</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>995dc4f97f699bb7a7361120f5cb46b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>8eda04da33078a95b2971e2c429969e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BonnMotionFile &gt;</type>
      <name>BMFileMap</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>c750dfb8bf1a24c281a65d3f8604fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>419bd9e8bbf1b82de00d37f69d289257</anchor>
      <arglist>(const char *filename, BonnMotionFile &amp;bmFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BonnMotionFileCache</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>534f7affd51962e4dcb01281a8ee2b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BonnMotionFileCache</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a5e2662133eef4f16420fdd355eb0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BMFileMap</type>
      <name>cache</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>97929fd681c1e9f2aa8d5269d47655fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>inst</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>5afb0e0b1382039314aee521db870412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionMobility</name>
    <filename>a00031.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>~BonnMotionMobility</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>890e8e118b618dfb90e16398d0aae8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>e509ee708096dfad9b02bafbf69a79ad</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>329cf4ceedc6b5bebc1714889c4924e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>8978680c719bf4c3e076b0b530053d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BonnMotionFile::Line *</type>
      <name>vecp</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>91dd63c39abcbf7f2df9786b805acfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>vecpos</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>29cc34905e56d8e18968bd0c21235ee9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurstApplLayer</name>
    <filename>a00032.html</filename>
    <base>TestApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>e693c2f1fc343d8c253778a1de1c4082</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>e3bd389dede2510650cfb8b32d5716b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>burstSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>5f3f95d8dc606e1003cd4262a091d39e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurstApplLayerBattery</name>
    <filename>a00033.html</filename>
    <base>BurstApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>8ccaf74e9a310c5f45447283df6dee7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>844beeae7f5dd04a628538b1b9fead02</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3413a8e1ebfbd7630b7389dc4d7f211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>66a2f76f5f30f1920dc65f00a6fd1ac3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a50363ece763f8c35957ce60fab0d9a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bcastOut</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>fe3e5af417f294628cbaa8594542ab38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>replyOut</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>d6a44e7b94755befebf39fde55643828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>replyIn</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>c5175743d144b772c7aa76bfcfacbc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelAccess</name>
    <filename>a00034.html</filename>
    <base>BatteryAccess</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>f4c4d6652f6e3d4846cb3d2e826f4bed</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>9147a8f70eff0b25bf4bcf0b58a18e94</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>calculatePropagationDelay</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>01c12c70034ec0583ee5f4e1ac0f683b</anchor>
      <arglist>(const NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>e370934ad7b1feacc1cb6bd6ad437198</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>f8577169feb196f32041c4a26ab07178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>eaf55c84ea130e728c946d9cf98d206a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>7f887e94fb15000c2c18b37dd208e556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePropagationDelay</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>3f1ba5f7cfe15f458b91c8c318b50f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>move</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>2f978b286e876d3d98c83b3548848e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catMove</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>4bf2dcb04c693899bb78a5d5997dc356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>dcbf1b348f6ed4099d8b86ef5d9059a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>4ea6b1d6aaceaffec8682eb8f0ff2969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo</name>
    <filename>a00035.html</filename>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
    <member kind="typedef">
      <type>std::vector&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>24db18e7fa230e0d62b31e95d86e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAirFrame</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>8c18092fc5d4f4c9aa0d282e07b45eed</anchor>
      <arglist>(AirFrame *a, simtime_t startTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>removeAirFrame</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>f9ee0be843528ee913df218f73d4d713</anchor>
      <arglist>(AirFrame *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAirFrames</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>9d15c32003f533919b8b0cf9c1fa8695</anchor>
      <arglist>(simtime_t from, simtime_t to, AirFrameVector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getEarliestInfoPoint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>58f6c6cd7e2dbd61877c27076510ba21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; simtime_t, AirFrame * &gt;</type>
      <name>AirFrameTimePair</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>e51fa470b3f5381d999c77190ccd44f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; AirFrameTimePair &gt;</type>
      <name>AirFrameTimeList</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>035fb2c30e213a68436d78776bb08dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, AirFrameTimeList &gt;</type>
      <name>AirFrameMatrix</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>7cf561db61870e6e49431440061ae624</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; const AirFrameMatrix, AirFrameMatrix::const_iterator, AirFrameTimeList::const_iterator &gt;</type>
      <name>ConstIntersectionIterator</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>0d01442390b9e8dd484e6f4d7975c14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, simtime_t &gt;</type>
      <name>AirFrameStartMap</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae7a390107aef628f7c9cbe5efbaeadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getIntersections</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>54e20f462bef98abc13e2407d43b8ed7</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t from, simtime_t to, AirFrameVector &amp;outVector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>e03aad760152ca0f9fa20e9233fe6b44</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t from, simtime_t to) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToInactives</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>12c4dca7c88af5b9a8b42530b1d51f3e</anchor>
      <arglist>(AirFrame *a, simtime_t startTime, simtime_t endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteAirFrame</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>bd8dc3769c806764a609f29b8df7801a</anchor>
      <arglist>(AirFrameMatrix &amp;airFrames, AirFrame *a, simtime_t startTime, simtime_t endTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>activeAirFrames</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>2db96b70bb8678e3e4959985a7ef27a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>inactiveAirFrames</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>c674b4797484960e332e260af4825c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameStartMap</type>
      <name>airFrameStarts</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>9c7678b4205557914b26e58edcdf44c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>earliestInfoPoint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>747fb91cec51e11d6c13c895c1010c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::BaseIntersectionIterator</name>
    <filename>a00015.html</filename>
    <templarg>C</templarg>
    <templarg>ItMatrix</templarg>
    <templarg>ItList</templarg>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ea9435f20fc5116479b86949bda422ea</anchor>
      <arglist>(C *airFrames, simtime_t from, simtime_t to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ec379ed62210754bcffd57f153dffd64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>C *</type>
      <name>intervals</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>db9d48fbcf1d9195c272505d4e741f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>b568fb7f7bc1f686654f8e347083034a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2cc333e29342d1c5f3e31710b1d3790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItMatrix</type>
      <name>endIt</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>06bb0065d74ef746daaa5cccc13fc1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItList</type>
      <name>startIt</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>f67606576c5ce8ef8e0cb19d5399ec88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>e686d5b84251f2be67b9a1228470c2f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::IntersectionIterator</name>
    <filename>a00036.html</filename>
    <base>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>3dfc19f01f6c7830e55b8fd4074d27b6</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t from, simtime_t to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAirFrame</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>69eee0870d96cfde0e74f9deff3554d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelState</name>
    <filename>a00037.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelState</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>60196f82a7cf53dde36d88843343a6db</anchor>
      <arglist>(bool isIdle=false, double rssi=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdle</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>c171088d0d716316bc523511d4e53771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>f02348254d5217a3144d9524cf27af62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a7125a711299c62119c5fe5bc3f43f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idle</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>6ade0df6803fb49731266569e7c94df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>bb965a7dd22a6000b4a1dc68e55152f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CircleMobility</name>
    <filename>a00038.html</filename>
    <base>BaseMobility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>5da791fc2eee9520ae16cd66e3bf3b10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>b42201631105af89360f7ada030ce7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a4fdf2d84f6aef6cd0454e84e4071d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>center</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>f0178935ad0f962f54e8cb7a6f15d80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>5508772822b819e94fe73c289bf15f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>9e64ba0defa6892982103bcb98ded29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>039e90d57dabbf0a5d52ac1be126cc81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ff0e5e6a6d0be3517cb410b0cae55642</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMapping</name>
    <filename>a00039.html</filename>
    <templarg></templarg>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>932ff0eeb59947b977b729b9902acd7f</anchor>
      <arglist>(ConstMapping *refMapping, Iterator first, Iterator last, Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>5ccd06e6b97a84932e662319d72e6048</anchor>
      <arglist>(ConstMapping *refMapping, ConstMapping *other, Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>d9e4caf92010d92e76ed86a597e3399f</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>93cf90d97fb4c66aa9648ed889af3d6d</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>createConcatenatedMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>0d0a5b90bafa4c46d5a9b4bc433c723e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>388dcb774652b131de7314f77a541d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>c754ae47ada2ed049df64ca970ff0bd3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>d8c0293ec56947b986802fcb636e42b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getRefMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>bcd3a9507ddf2e6e227fb0682f736b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Dimension, Argument::const_iterator &gt;</type>
      <name>DimIteratorPair</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>fddf6a03d86de6f473b3b36e9523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>MappingSet</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>633e23b7b9cc932171a9242d286f0970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingSet</type>
      <name>mappings</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>0709d9769788a41c2bb43dbb62aea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>refMapping</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>86b5292b536c5392543dc355111b19e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>op</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>f39cd5ee8c6ffea095d07d919162ea55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMappingIterator</name>
    <filename>a00040.html</filename>
    <base>BaseFilteredIterator&lt; ConstMappingIterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>d12b11e0d0d30c51e75fefa7a31037fa</anchor>
      <arglist>(ConstMapping *baseMapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>df03ef18a146cf084b5c3d21f765b031</anchor>
      <arglist>(ConstMapping *baseMapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcatConstMappingIterator</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>1c688f8cb08a686a0b7ae472b78f6add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>baseMapping</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>0106385bdcdcc52dcb340dff388c7e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionManager</name>
    <filename>a00041.html</filename>
    <base>BaseConnectionManager</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>beb688210449aa6a62cb9cd76e5cfeaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstantSimpleConstMapping</name>
    <filename>a00042.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>2880ada53afcc653eaaca8ce8a0e1782</anchor>
      <arglist>(const DimensionSet &amp;dims, double val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>4438ba99081282f35176a4bb16d6f174</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key, double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>64d191ef8f419b7de4f6e20e7625ec05</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a81d31244e6c326b0413f59fd20578e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>f87da52b2124169f119b566850993361</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>63f15a3fb6da788dbaaeb8b1ee5470f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>81e57c3aad6af85189c4ad65cde0bf39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstDelayedMapping</name>
    <filename>a00043.html</filename>
    <base>BaseDelayedMapping&lt; ConstMapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstDelayedMapping</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>3007a164bd9d530524e376d40602669d</anchor>
      <arglist>(ConstMapping *mapping, simtime_t delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstDelayedMapping</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>e4cd7b0ea626b8ebaed72f87724d8e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>b03b6e6623b416997b4467b7e14dce69</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstInterpolateableIterator</name>
    <filename>a00044.html</filename>
    <templarg>Key</templarg>
    <templarg>V</templarg>
    <templarg>Pair</templarg>
    <templarg>Iterator</templarg>
    <templarg>Interpolator</templarg>
    <member kind="typedef">
      <type>Interpolated&lt; V &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>0bd90e4c1343616f900eca29d7de2ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>d7a42a18b0244e30e360b0aeaa30b46d</anchor>
      <arglist>(Iterator first, Iterator last, const Interpolator &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>f7ccc6f48efc6d65e50185103decc593</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>3ee2c46cae727908bc6460d1151e45bf</anchor>
      <arglist>(const Key &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>17a318776fab3ddaba07be71dd7d503b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>996dfd3bb03b74bf863aade5ddb3c664</anchor>
      <arglist>(const Key &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>927effb5bd81dea6856406631177ef07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>getNextPosition</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>29eeb644db0a86c6278d14f9c04d435a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>128edfa5b20b79e513377fbf334d1b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>e47fa6975dfe70589405b6f6295c3a75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa8804205f89382e08fb104275b1e23a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>91134a17760f86c5fec23c14f44ad506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>getPosition</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>8834cdbbdc12733935aec116bd0ceddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>first</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>5bade54a356cb196ef49c45873c25765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>last</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>2627a7fb3b5eefaefadd1b7563a655ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>right</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>0f61dfafb18613acccd2e103c1445a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key</type>
      <name>position</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>37b17a78c6501554619277e34c32475c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Interpolator &amp;</type>
      <name>interpolate</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>46727117126e5bdda724d533c72e67b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PairLess&lt; Pair, Key &gt;</type>
      <name>comp</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>fee623436b5ac96648b509273974ec72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMapping</name>
    <filename>a00045.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>7cfc5de32a0d03abfeb9b77fdcf7a413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>4e057daa0a3726cafa70bac0e5393b26</anchor>
      <arglist>(const DimensionSet &amp;dimSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMapping</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>da5e6c6293bc459edbe69d711eefc8b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>97c31dc272587421374f619089932a31</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>1b5db5c478db5654372fa2667c847054</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>2df5f5323266fe4f3cf12f0c3c4da855</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>741e083fb18412a3d9cde7eac3dced10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>f8d3afffa09d4f4509deaf1c72e4c01c</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const DimensionSet &amp;</type>
      <name>getDimensionSet</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>cc1559cf5741bec3aa6422e94c5b9cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>0e3359f401bfca54242fb94f495d43ea</anchor>
      <arglist>(stream &amp;out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>e2bc84c85fe11f35e0f5be713d1b38a4</anchor>
      <arglist>(T v, unsigned int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>dfcfcc30eee9218e92c6f21097a34f0a</anchor>
      <arglist>(simtime_t v, unsigned int length)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>009539b72014b7bed96402a5c244fca5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIterator</name>
    <filename>a00046.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIterator</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>44af24e1f1842d16c9b9f208f7946887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>1f4cae3b170754a76049b8e81b2e3c07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>e3cdbe2115d0e87af0da549b675f2bf8</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>6b6af19266855c21ce3e3449de3f0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>607d741e2d841265851a85670f247c46</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>fdafa6870cd19b3d35674a7bc777585d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>4a6348a453418da95978e570fec046fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>d4bac7233c154b7086c6124d2e21be49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>047e853613d5a19ff34526d0cff8fcf9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>3a026005be6f95bd957de14f995fa586</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIteratorWrapper</name>
    <filename>a00047.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingIteratorWrapper</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>10f8c5f502b9cd83e9a6fa2d85195184</anchor>
      <arglist>(ConstMappingIterator *it)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIteratorWrapper</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>4d141200d6649997283e8c52447bfa49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>bdc9e2f85a1f8ef657e44f1cef650d36</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>603cbcad1aa33945132a3b8e2cfb769e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>4864dc39a40cada6f4abde4fc6eea3b7</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>6e3de2e2477083e963498675ed8b78b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>b96b7f5eca4759cdeaad879512340b93</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>01e885f408515be1170ce8af57de217b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>4a4bb9cfd56c7013bf5bd4347fef3293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>b60f4f00ba7175122fe6afef43b7cfbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ed031f6f66b8c703523fc41b0a7c2107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>767ba1350d53f43667f863255f1cba62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>iterator</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>9d00dbfbab2a003c6dcc041e72fc7440</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingWrapper</name>
    <filename>a00048.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingWrapper</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>6cdab405ad7b2fc76a7e040cdaccf2b0</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ef4ed7a855584495481e04f2bf2c8149</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>b5c7771bd13f8cdb93f5dce837fdffa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>b6de270ec2325131f99174860f396025</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>bc230cab41f94aef41d95e1b88722dfc</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>45b9da15b48c5872d269969a974ef5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0ef193ffd505d2701ed65595a718e0c</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>5290d7c6126897a26e810da626d115ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>17b06a78a2258990893fddf79d9268a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>d2145fd615041dab31ba7e96e8d1e319</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstSpeedMobility</name>
    <filename>a00049.html</filename>
    <base>BaseMobility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>3fbcc5d086c9dfb8c3ac6d80ccbb9625</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>e1e2838d4bae6d0821054a5e6c2abb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>0e99c274cf1444e65588e3890e9a8f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>f59b8e8b1693f2f8e81d015f96be790e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>74087748144ce9039419d543174f5b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>c5b6bb8b47caff5f6d946d6db14bbc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSteps</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>cba4123279b0c3ee840dcc02b20ed785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>e69b84a8287a321ebaed05d92b9811f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>a00050.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a773d5813f1ec04a05920dc07ef0085d</anchor>
      <arglist>(bool use2D=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>472c82aedd6f88d32b206087a680f0d6</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>cc1a24129625682b382fc6439b1daadc</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>641096179019c04796d941726d3bb890</anchor>
      <arglist>(const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>0a27319979fe90f4c16d71d0ddc1f3b8</anchor>
      <arglist>(const Coord *pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>86994bfa7096155d951abb03dcf30bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator*=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>5ac636fcca8c0987e8fed05a2451233a</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator/=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>62fbe4efc3ec5cfa2fa6621f6b006572</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator+=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>4406a6b6ab4358878e84f9c32fc782bd</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>fbc6c6708cca8ee577464900b2d76cd3</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator-=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>f77a38171526503751808a57f834ad94</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>b6a7bfcc5c55e5d8edbc7c0cb5a11626</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>9245e5acb794d95128e191e6faef99d4</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>3cb12a3e613e4063851e918ac9311fd6</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;playgroundSize) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squareLength</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>278c018d6de54a020c39b3b1afaec50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>cc536671c07e1af44e6ad9676a6c39ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>d94de80c8a298b8512bb5cbfb0780233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>d50ee89d2cd02af12bd03bd1178283dd</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>12bf34c0dadd23060dbe642132a891f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>7a3693dcf50baf5125a9f805efeb1d07</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>7014de52bf825a9590554ea6aeb8e42b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>d8d32e5f428b38c837fe4a2c387a6914</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>6224bf19a3fc106562f7413e67a18a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is2D</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>0469da3080a18cace73660dd8543f1fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is3D</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>9e4ff1735826a07960392f2fe8cd58a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInRectangle</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>f162716a5c58d0bb76772c9d5773dfc5</anchor>
      <arglist>(const Coord &amp;upperLeftCorner, const Coord &amp;lowerRightCorner) const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>min</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>0b27150571dfb315bea3e650ea2956a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>max</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>c5a32e0e7a527085f63b7b3476ae47a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>UNDEFINED</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>c0fa664a0fa88ab258640683f426c2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>0172a22ee75843a96e3a84ebc25f3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>f6e543e0522076e717bae53102655b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>z</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>2bf056108a79437171f18490afbdce2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>eae820ab976f0ce888657f72357f46d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>3210620c5b8518a52d5b980094916a65</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>09799a95cd267e73e80fa5f936210c40</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMAMacLayer</name>
    <filename>a00051.html</filename>
    <base>BaseMacLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>660262c629f33b00401249d3fdac49be</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>eaffa0655b4e87224a9a2f09b96805d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>83911b5673de047bcfc3c9b0a719ff15</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>06c96c060afdff5c0f348b5ebef5c54d</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>254a29c1cc1f0292039d57c1d189cda3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>2eb12cedf0b4b5e6fda8bd6666186cb6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a504ef94f12cc702c82a81f5f0654913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a504ef94f12cc702c82a81f5f0654913b8f2c7ef825f0c569512139f5482e631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCA</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a504ef94f12cc702c82a81f5f0654913cd80830b40d6cc8615ea4ff537cb37ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a504ef94f12cc702c82a81f5f065491318461bd2358689c90c3c5cade629e0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; cPacket * &gt;</type>
      <name>MacQueue</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>f397ee30d94486721632bbcdad8274d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleBackoff</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4ace66cbd53164dc27f4fba70dd60b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>12641a9e99a3064797647cf3b4946824</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a78817d8e3bbf7850e5d84a6377ea907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotDuration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>420bec99b62f029c75996930bc5cb56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>difs</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>5a0fde63ac12cccfdb98bfe6314ce46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>9869bd7667eacdb3a9c5f8ecb0c3ed19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>27628021750dc0e8cf651382663276b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>backoffTimer</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>946e29bb8fead33566797a7062649a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>minorMsg</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>f06855c96a26dbe77937062bead7f82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>txAttempts</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>6c9b1b0f5eeb45db611633ca986f537b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxTxAttempts</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>e3aa6dae3903cabacbcafe783ef33d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>70ae938b76fa8fe65d97b0b511767894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>619cc05568e8ebef57ff9c551cd311d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>initialCW</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>8ec2aea0983e2149d3c7d1c06637dd70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider</name>
    <filename>a00052.html</filename>
    <member kind="function">
      <type></type>
      <name>Decider</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>771545ad005ad69bef78b53fa831a7e2</anchor>
      <arglist>(DeciderToPhyInterface *phy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>82acc7c518d526216b2e31603ecc9866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>2039d051f59054d39d4a5e0b38f25086</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>e8ada7aa9855a753d227547c6645fbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>93548ff29f4d880ed488785509dd4dd9</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>6baab300e0bec90320dfe956c2d15a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>e47e3459af2a4a7a1f14f6e60d2fc4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const simtime_t</type>
      <name>notAgain</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>3edae7484aed7b0b874521c724bd3c30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211</name>
    <filename>a00053.html</filename>
    <base>BaseDecider</base>
    <member kind="enumeration">
      <name>Decider80211ControlKinds</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf94ce46e3edca3fa4d93150f72f4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf94ce46e3edca3fa4d93150f72f4ae406458adbfbedec1d989361675c3f37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BITERROR</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf94ce46e3edca3fa4d93150f72f4aee12bbafd7ed8d0978ac925c1a493aabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf94ce46e3edca3fa4d93150f72f4aee5c2edad30720b7e527373b28bd4e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adf94ce46e3edca3fa4d93150f72f4ae397fbae93de43832a0bb2bc1bf7003a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider80211</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>07a5fe046d32020b189f73f5bbf4f010</anchor>
      <arglist>(DeciderToPhyInterface *phy, double threshold, double sensitivity, double centerFrequency, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>46c5172b26f2e0bce6454b178d8b4998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>checkIfSignalOk</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>d765525c74deb1b88742ed8dce4271cb</anchor>
      <arglist>(Mapping *snrMap, AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>1f929f5b474f7b42c5c47acdd740cc68</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>2f8e006c849f1c14f4578b70358d0ecf</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>packetOk</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>8fa275c3922106556c98a2f51b502794</anchor>
      <arglist>(double snirMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>3d7bfccf1c3b199842ea44b7c00e70b2</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>252eace2ccbe59484cd209be494a3983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>15af6d061ab83d73474b6b94684707b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211Battery</name>
    <filename>a00054.html</filename>
    <base>Decider80211</base>
    <member kind="function">
      <type></type>
      <name>Decider80211Battery</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>7c049a7ed34b6266332e057303f28abe</anchor>
      <arglist>(DeciderToPhyInterface *phy, double threshold, double sensitivity, double centerFrequency, double rxCurrent, double idleCurrent, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af7ec7c2d440ada77c2c6ffa2af13802</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="enumeration">
      <name>Activities</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>63de3b8b20a544610515987d65c2e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP_ACCT</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>63de3b8b20a544610515987d65c2e5345c549481dbd8572418d1d4c66f1e89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE_ACCT</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>63de3b8b20a544610515987d65c2e534f2bdec4dd7f7fb2edd8ac56f752f9a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX_ACCT</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>63de3b8b20a544610515987d65c2e5340bb568b8b8d16da1e9f5fec595e19892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_ACCT</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>63de3b8b20a544610515987d65c2e534da36bf5a5d6f246f6b08c70e43d478e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxCurrent</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>f98ddbb692c3fe9ded5be2c551d228e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>idleCurrent</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>15141e85d734f37c1d31ae7bbd30c63d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult</name>
    <filename>a00055.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderResult</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>8d682a73b124b89f30442a205c060061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeciderResult</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>86937859a140dbe670d6fa3a2f6f839a</anchor>
      <arglist>(bool isCorrect=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSignalCorrect</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a0ff5bc718c64668cb1ce09c2c7dba80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isCorrect</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>73068fc2669c331401e00fd985ced574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult80211</name>
    <filename>a00056.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult80211</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>67b7eb5cb3ddad6136840f6c42399a4a</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>514a242a3b67f14f7536b6d59e26a7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>2a5d1c65094164e0fad38927a14a4fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>b80f1803479db0321ff8532c9bed815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>1fe1171bdbc17bfca48bcf700472375d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderToPhyInterface</name>
    <filename>a00057.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>9731ab2cbdaaf5e46cfe98ae81e5a1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderToPhyInterface</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>945390696eba2d7cbee66a3a2e74ce5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>79da727975ae1053da37157f13a08b25</anchor>
      <arglist>(simtime_t from, simtime_t to, AirFrameVector &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>be550ca86568314b6dbcdc5d835f2178</anchor>
      <arglist>(simtime_t from, simtime_t to)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendControlMsg</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>14d6506f37de87b057084c01295d5e8c</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>3c0676323e402449d0972890c6a14df3</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>73660771f127a990489fb04da07ea39e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>f85151048dba05ec27e378000fd95403</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>1ee7d31b5bf0cda9e543ac91b3aaecc5</anchor>
      <arglist>(double amount, int activity)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DelayedMapping</name>
    <filename>a00058.html</filename>
    <base>BaseDelayedMapping&lt; Mapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>DelayedMapping</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>80745b729069761a2514d7ae57562c46</anchor>
      <arglist>(Mapping *mapping, simtime_t delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DelayedMapping</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>764ddc58c30df062647b07282a235363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>047d902d5368a2200e6961e9d878a93d</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>e298d25469c44c9cad54b33e8a787637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>52ea3c1399aaecb055d63c535925bc33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>4dcb7018c79d6db7f0dc884dcabbcec1</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeviceEntry</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceEntry</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>4d2a5848f5e37293c54a8b74fd11c12e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DeviceEntry</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>916271ad8886d23f9cd270887de8dbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>name</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>6c703e9faf3cb9d23f1d1f3e1873ac26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>draw</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>adcb1dba37682677f0d224b98a57a794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentActivity</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>db655a65790a6490d77141e4ad2bf7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAccts</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>9ee839aa662f60bea339e49fef4fb403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>accts</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>61a487c73b3bf0d58219cccfe793311c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t *</type>
      <name>times</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>b9c13beb4f5944f055a9522937e0ecf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dimension</name>
    <filename>a00060.html</filename>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a61dad15f33b6c3d09028ba9e545aa70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>92c06487012709c6feb9f632125069d1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a28efdf18dbf57fdc444f2dd75f3da36</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>3ecf516080e05e566b995ceec18681e4</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>28bb1ac7d3b0ed4e8fd43c54203c552b</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>7b87afee490115d91184cadb4dbd19fb</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>63668e024e4a1ba8ac2d819bdf01de23</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>17b7c615400bc79a9e7fcc40f17914dc</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>f1416132a49aa3ddcac7ff0b014125b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getID</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>eb4e7dcf9998c35959e8de868384eb35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>time_static</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>0ebe0eeec14af70b3f75f675c3eb7a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>frequency_static</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad8d4dbdfadd58664a90f34ce4d8154e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>time</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>16cb1f186dd3f48d33a4aebe948001d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>d4360e7d88c881d06ee61033ad99d66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>DimensionIDMap</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>98893d7be4182e964c9c3e495fed3cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, std::string &gt;</type>
      <name>DimensionNameMap</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>26119e932689780c97c6fa1dcd649046</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIDMap &amp;</type>
      <name>dimensionIDs</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>da939a13a34a9c28edff67670caf873d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionNameMap &amp;</type>
      <name>dimensionNames</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>5dd35619b73de635a0a57aca248af68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int &amp;</type>
      <name>nextFreeID</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>9dcfa1d37107a1a14b4382eb3e96b647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getDimensionID</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>e286ba77a37f9c22376fb2ff12c66b51</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>b2a8a3e455fe5b4bcc3bdd93920352b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a6723258d45f8e2d57a861db96d05a43</anchor>
      <arglist>(std::ostream &amp;out, const Dimension &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DimensionSet</name>
    <filename>a00061.html</filename>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>09645917a6984ef63aea0f3428fb97e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>92d677f9425a8157391e401dd7f054d3</anchor>
      <arglist>(const Dimension &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>413af32e4e7c5c8ccdd1e5d232c2af15</anchor>
      <arglist>(const Dimension &amp;d1, const Dimension &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>6874c329016629c5d39b3f3eb7f881eb</anchor>
      <arglist>(const Dimension &amp;d1, const Dimension &amp;d2, const Dimension &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae6d8ce3a87e3e1571b97c92f11363fb</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealSubSet</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>f3c9b9a85688a4f1ef8caa3b21bf7423</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>0c8fa8d00d7292a1cb62d7322492b2dd</anchor>
      <arglist>(const Dimension &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDimension</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>bff94c9cf9c04ae1b8f0ad5c3c4cf359</anchor>
      <arglist>(const Dimension &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>3e0b9829cd18a28c2dce2bcb37e9c207</anchor>
      <arglist>(const DimensionSet &amp;o)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeDomain</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>bf3b99a319deca6efc123ec52d77d867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeFreqDomain</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>c3f34a560d6c4ad5dc8d72dc69359b77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawAmount</name>
    <filename>a00062.html</filename>
    <member kind="enumeration">
      <name>PowerType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>e388439d3e21c30f465e2563199bbec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURRENT</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>e388439d3e21c30f465e2563199bbec4016388dc7648bad664202c766d5fb922</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>e388439d3e21c30f465e2563199bbec4d8fe7930899c36833e603cd89446d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawAmount</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ef3634db7bcb1ad3cdd4b5ac86be02d7</anchor>
      <arglist>(int type=CURRENT, int value=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>c745d9dd40511fd7936b9c308895abcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>e79d6860052d6cd4e56e53c972453560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>7fffdcf0b57e6b1609f16351e9d4dad0</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>8e411a80838eea09c6b38bc232e902ff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>d7d65a7c37b7f2b4b48de40fd4e6bc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>5e5e81c528b00da622e79a04d603d4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMapping</name>
    <filename>a00063.html</filename>
    <base>MultiDimMapping&lt; Linear &gt;</base>
    <member kind="typedef">
      <type>std::set&lt; double &gt;</type>
      <name>KeySet</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>05cd9d6e4dce60c863ccbdaecbd3a7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Dimension, KeySet &gt;</type>
      <name>KeyMap</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>6b714062e32fe2c679b17c0ca7ee2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>0dbf03e8602b49a2552d7048cb27e429</anchor>
      <arglist>(ConstMapping *source, const DimensionSet &amp;dims, const KeyMap *keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilledUpMapping</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>3dc004029a03460606f140613322f33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>49bd8681e1fcf20621161300101c85b2</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>13d1a4a5fbf6e7a1915b010d63ffc4d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>c05ee0f09361957877cde397b66b028b</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRefIfNecessary</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a6a4087b7ecb1be68dade630c328ccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>4715b5dadbc289fe61d3ca86ffca3adf</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, const KeyMap *keys, InterpolationMethod intpl=STEPS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createSubSignal</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>46a248189b439d4a682b8fb78e9c0fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>fillRef</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>2771812d5f5398944fd9ac80e3d5f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyMap *</type>
      <name>keys</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>0d5db2ba829ff6abcac8544a1672421a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMappingIterator</name>
    <filename>a00064.html</filename>
    <base>MultiDimMappingIterator&lt; Linear &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>fde5d08a387ba90e46518a7e8c87fec3</anchor>
      <arglist>(FilledUpMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>007146e1e1a7612a1f10cc5d20b1a03c</anchor>
      <arglist>(FilledUpMapping &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>920165972fd3d4b78cffdc5a842d5a69</anchor>
      <arglist>(double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilteredMappingIterator</name>
    <filename>a00065.html</filename>
    <base>BaseFilteredIterator&lt; MappingIterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilteredMappingIterator</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a239f06958c35671f5f407224758b61c</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilteredMappingIterator</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>debf25df38a744978796c3754df312d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>f09a09d53c8c4a795f0587623bd61dde</anchor>
      <arglist>(double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindModule</name>
    <filename>a00066.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findSubModule</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>5414db0140a7009688e12fc3ea23aa15</anchor>
      <arglist>(cModule *top)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findGlobalModule</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>36e4632a6c8c7dbdc177639957a8e62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *</type>
      <name>findHost</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>5f5f3c96bd5304ab5edd8921ec89f334</anchor>
      <arglist>(cModule *m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameTimer</name>
    <filename>a00067.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FrameTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>d113a51d8e1ca3fca916b8cbc76c3d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>2a84faf6344eed264f046a7416c74f39</anchor>
      <arglist>(BaseModule *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>441a84c72d0ca9457cb22d4bd2a36351</anchor>
      <arglist>(unsigned int index, double period)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setFrameTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>c12ce7d0e394175101b3be9103196b23</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelFrameTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>b027b884e7ac4434c479b262229fb7bd</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleFrameTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>9869affb7ee9cd5fd487cbb7561b3c1b</anchor>
      <arglist>(unsigned int index)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameTimerGenerator *</type>
      <name>tg</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>cbc78da26112ff269ba568f4b0ddd683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseModule *</type>
      <name>owner</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>6864466b32ad0c8b091728b794f3fc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FrameTimerGenerator</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>6781b8dc9cfee91cefdf094fcdbfa946</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameTimerGenerator</name>
    <filename>a00068.html</filename>
    <member kind="function">
      <type></type>
      <name>~FrameTimerGenerator</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>1e6cc35d54d864be2719bf886fd942d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>e336bd58410bca3d865ab591a449e2c3</anchor>
      <arglist>(FrameTimer *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameTimer</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>286eda98540b42a21bf6d900b5f3791e</anchor>
      <arglist>(unsigned int index, double period)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setFrameTimer</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>b121b7796802b6de1aa3561f99d34d25</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelFrameTimer</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>124cb07dc79182d8a17bbed7785817ca</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nextFrame</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>e434d025e974b28bd6d63e20df1921ed</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>9bb48d8e61b500ca8395947970453d01</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameTimer *</type>
      <name>ft</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>76078f2cab71866cb185eb5d4d1d9834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalTime *</type>
      <name>gt</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a82cec8f42cd08355eeea2cc13f5dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, cMessage * &gt; *</type>
      <name>timers</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>530f08684dc61fe8163834c9e08638a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, double &gt; *</type>
      <name>frames</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>0439175396f202baf338712ce0853666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>a00069.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>2867eea5a97b7685de513a989046f699</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>76f6d077fea756cc254c9405d0b51708</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>38d2500887b49de2a2b5f8610f7ba6d1</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>4d2b3271455f9f914bd85c0e22064c09</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9f55c74f3cb5eb99d5ff3d00ca3d281</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>d5b2d4a46bf7af77e9cc0070b6a82c18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floorToZero</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>db95c6d5b092b752dba10eddac28055d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>7fd5acab90d26f509178dbda7935adcf</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>min</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>844768971a7bb82a98279b95b7c11fcc</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>f308407856d9835b103f2421e373ee28</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mW2dBm</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>f1390153a78142efb6af6225034f954f</anchor>
      <arglist>(double mW)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>torDist</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>cd96461f25926d41853a5eec95274ddc</anchor>
      <arglist>(double x1, double x2, double y1, double y2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>erfc</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>329acfd3d3ffbe6fd12607bf856406b1</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalTime</name>
    <filename>a00070.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const simtime_t</type>
      <name>currentGlobalTime</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>45fdf2591fd6bdf21885443e69edafab</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HostState</name>
    <filename>a00071.html</filename>
    <base>BBItem</base>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3c24022de9465df959797f9b000cb87ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3c1a8705dd49a3297fc8512a1ac63b78e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3cad59622a148c4a5f0db2fd6c9fc8640d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3c7270c313de38886faaab80c7dd9b9864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OFF</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>5002302e0f07bbd982c6e5d65eaa9c3c7c7320a0c872c90c3a26adfa4eb48412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItem *</type>
      <name>parentObject</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>9fab0b3e1d02a13ec1992de7a06f1427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostState</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>9826824b5332180e2bedd17929b8f64d</anchor>
      <arglist>(States state=ACTIVE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>get</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>3167de707748fd5280fce231d6cbcf90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>403e773f87d00a6c66f3f017441de752</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>3b7466f384edafc0214e39265e27fef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>States</type>
      <name>state</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>891b154c7213fb04e5f3d42fdc22b0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImNotifiable</name>
    <filename>a00072.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>d782c77e2cbed174071ee2711ad27d73</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImNotifiable</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>0d65c4470a070857359052137d176585</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableIterator</name>
    <filename>a00073.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ConstInterpolateableIterator&lt; Key, V, Container::value_type, Container::iterator, Interpolator &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterpolateableIterator</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>3229f07f1ac72fcf42115c923ddb53ec</anchor>
      <arglist>(Container &amp;cont, const Interpolator &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>b62bb153b639bf153917ed092f023c87</anchor>
      <arglist>(const V &amp;value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Container::value_type</type>
      <name>value_type</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>c1a4323e86ad8be81e88c9546aed278d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Container::iterator</type>
      <name>Iterator</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>091f3da72d6fc07eab8fd0dbe22c332a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConstInterpolateableIterator&lt; Key, V, value_type, Iterator, Interpolator &gt;</type>
      <name>BaseClassType</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>5de44b154d3dc2f0cf21b3c22bf35ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container &amp;</type>
      <name>cont</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>e79d0dbae10d7393dd8ff7d1cf129a41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableMap</name>
    <filename>a00074.html</filename>
    <templarg>Key</templarg>
    <templarg>V</templarg>
    <templarg>Interpolator</templarg>
    <member kind="typedef">
      <type>std::map&lt; Key, V &gt;</type>
      <name>map_type</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a89f94d522cb1c009df46411a8725b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>bc5ceddb0052a49ffa55f1879b4d1562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>1a605566102bb7a4d77de8f3c1e634b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>037de8754ae6136287cfa314c170e070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolateableIterator&lt; Key, V, map_type, Interpolator &gt;</type>
      <name>intpl_iterator</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>941feb84cd0235688de82f926279b87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstInterpolateableIterator&lt; Key, V, const map_type, typename map_type::const_iterator, Interpolator &gt;</type>
      <name>const_intpl_iterator</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>66484e461117bbceb48bd42802801fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; V &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>023a0ba835b3ff3850dbb1f2c7f67837</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>f9c94a15aabab67012707914b48750cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>3766622a7e5b14efdea78ecd3fc014c4</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>b30a93214c2fea7e8fa0518c60d3929e</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getIntplValue</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>3952b258b3a6bed9817ef09e65ed48e8</anchor>
      <arglist>(const Key &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_intpl_iterator</type>
      <name>findIntpl</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>97e24c69bc40696be736d1212d2da425</anchor>
      <arglist>(const Key &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_intpl_iterator</type>
      <name>beginIntpl</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>e57a4bb469dcd82c9eb11ec2650e4a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>intpl_iterator</type>
      <name>findIntpl</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>c5d5d3f02bf903b2e0cf2df7d562bde2</anchor>
      <arglist>(const Key &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>intpl_iterator</type>
      <name>beginIntpl</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>04a28c2fa0d5ce142357ad1e3ba80472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>interpolate</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>6cdd0b3cc53ca81605a27cd7113ca13a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated</name>
    <filename>a00075.html</filename>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>2f760796d0b5f9155bf3ed64164d792a</anchor>
      <arglist>(V v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>operator*</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>65ce94c5a5ecc65cac30bc7365423211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>operator-&gt;</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>5aa19640f617fe22407708bf98fe1a91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>e11992e87c7a6ac48a21ea53dd7c2b41</anchor>
      <arglist>(const Interpolated&lt; V &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>d9debc67bf461df751a78e15a3291233</anchor>
      <arglist>(const Interpolated&lt; V &gt; &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInterpolated</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>6a2018e6e4bc3744677eb10332cad18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>value</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>9c49527861a9ae1823fdecf00eb1e51e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated&lt; Mapping * &gt;</name>
    <filename>a00076.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>e6dbef7dabca0ce3f6f3110b28b48c8e</anchor>
      <arglist>(const LinearIntplMapping &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>0978aa8072468a5607fd2791880060e5</anchor>
      <arglist>(Mapping *m, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>7145de243b799f4b424dd1f668e8e68c</anchor>
      <arglist>(const Interpolated&lt; Mapping * &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Interpolated&lt; Mapping * &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>0e3d51a8d5f9650c1293a1f06921ad35</anchor>
      <arglist>(const Interpolated&lt; Mapping * &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *&amp;</type>
      <name>operator*</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>72f677f033b7683a1772d233f9602d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mapping **</type>
      <name>operator-&gt;</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>734afe9c03ec39c7203d8c02c0f03e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>f6f6c20ad642bd6066f318b2967f6b64</anchor>
      <arglist>(const Interpolated&lt; Mapping * &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>2d4a079df56cf8ca936140a60088201f</anchor>
      <arglist>(const Interpolated&lt; Mapping * &gt; &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInterpolated</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>5f5b0e3a8adb3c2ec8b4178476334cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearIntplMapping</type>
      <name>mapping</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>41f35d1266c83a26a22d6d0b411ec34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>value</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>011ed788941e752df2accd52e9f4f814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPointer</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>34000edebc6bbcca908e4cf61f0256d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFading</name>
    <filename>a00077.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>JakesFading</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>1c9e7bb8acd9e467d22851b4c1d4e284</anchor>
      <arglist>(int fadingPaths, simtime_t delayRMS, Move *hostMove, double carrierFrequency, simtime_t interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JakesFading</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>44991f849a6d094ad73f66063eab8ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>65c2261dc79239c16bc4763a7379a81e</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fadingPaths</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>d28b3b2fd11307bf33869c5bbdd27a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>angleOfArrival</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>7f9a358fb5cdfd19e6d1e7c97627ad4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>delay</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>2f0c52cb4f441a2abba9aec17194fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move *</type>
      <name>hostMove</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>45e571e73f5f4587aca7701bf528ffbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>8c91a22de8e520176877f7421d033ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>interval</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a15d56a2dadede1a0432103d60d6d927</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>JakesFadingMapping</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>512ebf4ce5a76e1580f7058c9fd49d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFadingMapping</name>
    <filename>a00078.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>JakesFadingMapping</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>5feea6585c074e1dab16486600db7a25</anchor>
      <arglist>(JakesFading *model, double relSpeed, const Argument &amp;start, const Argument &amp;interval, const Argument &amp;end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>23e8978d7aab4509f846ac6a8044de19</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>b8c347fa961711d3fd2c86b425cddc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JakesFading *</type>
      <name>model</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>fe3bf29047cfa0f35c20926441261738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>relSpeed</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>02aab24700471b25a801010842d54cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>52281acdf3981141a525adb9e18792e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear</name>
    <filename>a00079.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Interpolated&lt; V &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>92fc62a8b7386d1b92981fbcdb933b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>65255cd48d90153c7dc09c876358fd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>065516ef0b58c04854044eb0f0c8009f</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>c091445e86494309eae8ddf4ef472385</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>452732046d84a79880a4b24d24b47d35</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>40698afc50ab44060ccc842794febdf9</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos, InputIterator upperBound) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>linearInterpolation</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>92afb8fd0e5ff251235ee031dd7df369</anchor>
      <arglist>(const Key &amp;t, const Key &amp;t0, const Key &amp;t1, const V &amp;v0, const V &amp;v1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PairLess&lt; Pair, Key &gt;</type>
      <name>comp</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>bb5148ad32b3ad9d49efb55e06b9fc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>dda42650b4652add0919c0eb7f03e9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>outOfRangeVal</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>f81406f27745547c730fc5d7419cb873</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear&lt; double, Mapping *, std::map&lt; double, Mapping * &gt;::value_type, std::map&lt; double, Mapping * &gt;::const_iterator &gt;</name>
    <filename>a00080.html</filename>
    <member kind="typedef">
      <type>std::map&lt; double, Mapping * &gt;::const_iterator</type>
      <name>InputIterator</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>02b0d6e72a64547069c1442f3cfb3921</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; Mapping * &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>c44b378e8bef7194c903bdf204e07c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>5493f7b278d65e55e73e9ba0952e1a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>63d6b2c5cce4e238aaddbb57730011e0</anchor>
      <arglist>(Mapping *oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>b4ec662f358e8b58fdc724faccdc7ddb</anchor>
      <arglist>(Mapping *oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>12fce4f375cfa3fda312e66d96fdab93</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const double &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>174a4056528051cce0784cd36391502d</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const double &amp;pos, InputIterator upperBound) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>094464f3909d36330e7b19cbb4c105db</anchor>
      <arglist>(const double &amp;t, const double &amp;t0, const double &amp;t1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PairLess&lt; std::map&lt; double, Mapping * &gt;::value_type, double &gt;</type>
      <name>comp</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a364ac44175e99691386e6318df18fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>fe0c74dda1175d94dab8d558ef7e0367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>outOfRangeVal</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>28926589cdb9525dbee5fede6fa9c08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMapping</name>
    <filename>a00081.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMapping</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>3a93a8766ba1b55ac7b4e57e6593400f</anchor>
      <arglist>(ConstMapping *left=0, ConstMapping *right=0, double f=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>deef3fecfcb6b2551ee205e6e1e69166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>1b35c91344706ba5d56c38217822ca64</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>3a3735ea665eb5d05d8f8d5fc29f408d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>d0da987f0b7bd22db5a18ca2558533a4</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ca393604027fff780401d044a4e63392</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>left</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>e57d7f5154fee3a414745b3d6a6200c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>right</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>05f683708b3017fbc67e9244d7e80692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>factor</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>e5b8e6c0f94ea4f1d4f9a97bb3e31fc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMappingIterator</name>
    <filename>a00082.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMappingIterator</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>e4557f1f4e0f6437a72b6ed4562570ad</anchor>
      <arglist>(ConstMappingIterator *leftIt, ConstMappingIterator *rightIt, double f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearIntplMappingIterator</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>e6640d047e2f8fbf1990d07f901d5dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>fd257e5e5a70bf27869aac0ce2de9114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>43bdceb0dade66a9d763a1a7f9e34119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>c53a581da221a4467b11d731c6363ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>3e091971d2bb7c505071812fce9e4376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>728723707f0e2477b76e727c4265b611</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>4815486cedcd67fad5fe08d86867f527</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ba27952eacf852f6098aa05bc7bc3c8d</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6901cfb71aca53316316a30df1058cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>b8aba8a0341ee7e0731da138486fae36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>f0420a645633bd90a0f7775f2c6f527b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>leftIt</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>45afec325d2566593b51e75ca04b3d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>rightIt</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>39075af633fbfe901e92bde9d2db2fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>factor</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>eb94cb52baea9e9daf9d82bdcfc1d934</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearMobility</name>
    <filename>a00083.html</filename>
    <base>BaseMobility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>62140715094683043b6991fa3de8db4f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>44b01749db78564f9539d92dbd519476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>2ebf081b9e6a165c97535c0c0c40431f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ecacb8d29b3fd3f4cf85722abc9a3491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>adef59efc17d450a0fa214321b84f90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>7c60709964c5bb493ca25114f84c50b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsMobilityBase</name>
    <filename>a00084.html</filename>
    <base>BaseMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>fdc2cc87420812a5f24be6df868a667e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNextMove</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a41f2b6ff6946938226f7a54a4c8fa26</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>e9b65139861752e826e50eb23cd5a470</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>targetTime</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>e532cb827c80ea05796c6706dda421aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>cc2b14ca70a4318da1cc96893c39265c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>9f783f173448c645afda46d2f6c291d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>651d8dd356f04232bb0a865491ed9d89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogNormalShadowing</name>
    <filename>a00085.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>LogNormalShadowing</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>cce2798d3f9a9d598744084f8261d4da</anchor>
      <arglist>(double mean, double stdDev, simtime_t interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogNormalShadowing</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>1562003748d366431fb43497a711d6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>656502ef67ea98520214ab022fcdc0a0</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomLogNormalGain</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>b81e4e559d16d59321fe0dced4a45806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ee67e375c4b7d3c77626db7cade7dc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stdDev</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ca2682f5148bf872b64cb1dd6495829b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>interval</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>7b8e51fa4f9b3e1369cc9f882eef22ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>36d05c650ed1e910e99a4f2dd24a4031</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211</name>
    <filename>a00086.html</filename>
    <base>BaseMacLayer</base>
    <class kind="struct">Mac80211::NeighborEntry</class>
    <member kind="enumeration">
      <name>Mac80211MessageKinds</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTS</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44ae37294c092b58bc2b8b13eed3743bbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTS</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a41f567fa1631dfb9583b3521516896a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a6c9256379fe532383569665e6498c0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a3e44931a7b0bf9a1f060898544c94467</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROADCAST</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a9b73e5611a23fbbe50ae68325164a9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_MAC_80211_MESSAGE_KIND</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e423db101e8431b0cbd67c347076c44a1f3b6eea4f5d001e12e4c466903a8519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>b81dae24d79c2ef010301e2c219966c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>2f3c51473a890e1c3e3afb5dc1b75252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>timerType</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>381307739876ed0d015352b95bd93186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>381307739876ed0d015352b95bd93186317269d758fc1f055750d43926abbb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAV</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>381307739876ed0d015352b95bd93186d2d7f908db1dc3ed72e451dad336d654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe447</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFDATA</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe447be0abc1112335ff66c1eef6bd95371e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUIET</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe4474cfe7a25808b0e110d662483abec7256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe4478904ce43407ca530f7fe83d63c558e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTEND</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe447e138f38743ca77f1300a24d4d79786fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFCTS</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe447ccc67a0993941984c4f6b49c633c2ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WFACK</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe44750a717bfadf9a3fdd634d77950607278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7ff0b8b49d1a93feae6f808caf5fe447a1070f3c837e8dc4d7890536f7cfbaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Mac80211Pkt * &gt;</type>
      <name>MacPktList</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>565ab82077f95d80ec44a4a4fed08ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; NeighborEntry &gt;</type>
      <name>NeighborList</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>072f068412a3577d8d11ca98c52a9c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>990af33f857669759da0cbeebd1c2431</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>f7e230f8713536482417699f2f6bee71</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>c8bfb04590aab2434bd8d17ee4e213d9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>41f1a7b86f420e1f840c14badf2b0890</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndContentionTimer</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>0a87fa1791117ef1dd1841ba217e4245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgNotForMe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>0c26c2759b2d08601ef21246e1ca6707</anchor>
      <arglist>(cMessage *af, simtime_t duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgForMe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0b767642d86d3b66f1d3258065fe5ae</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBroadcastMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>dfcf8b7a5e1db233a1bd717cecaf49bd</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndTransmission</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>fe4300147d9ea5e4d3e3d8c98ff20436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndSifsTimer</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7d36a55827a7ea91b2539c86d79349af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimeoutTimer</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>b5fcba8c7a3878ac59195a483ba35a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNavTimer</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>23a142d65d7a0dcba4a60c0f509ab5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRTSframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>98ad0d3935d620b33302e5230b395685</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDATAframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>b0844f9dbcece750c9a58ca9f0a73fe1</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleACKframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>50cb85360462eb7d256ec8a0b493ca44</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCTSframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e1e17af7dddc261d7947d48a1f4d0e21</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDATAframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7a4ff22b4b999827a898794923115880</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>1c404a5176db493c2fefb71537783607</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>1fd59a589e53facb68c13be84521a49e</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>3104750758ab171b20ffcfeae0079a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBROADCASTframe</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>26b30d048980b56d79c04e859bfce009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>encapsMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>008b57947b7d9287bb34b1e67094ebb8</anchor>
      <arglist>(cPacket *netw)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>3ef80a5603d99ff49bb7769a333e939a</anchor>
      <arglist>(Mac80211Pkt *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewCycle</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>b3030c86acac78401f877a61cefcdad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>backoff</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>de2c913df312fd4fc46106c1134889b8</anchor>
      <arglist>(bool rtscts=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testMaxAttempts</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>72e78257babff863ca8749b2bb1a97f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeOut</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>424851e88bb229fcc3c59cfea80a9079</anchor>
      <arglist>(Mac80211MessageKinds type, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>packetDuration</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>6732e4a776e78432bf5dd9dd26de2f7d</anchor>
      <arglist>(double bits, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>stateName</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>de8a90e665191333e610b60bad4a32a1</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>9fc6eb078e53740d354f8ea7b9d94713</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>rtsCts</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a316943080d714ffc3c0bf54ea8aeb08</anchor>
      <arglist>(Mac80211Pkt *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>suspendContention</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>9ae0815a0e01c4d4fd13a87393f837a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>retrieveBitrate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>386da37d596d50ddae0c2bb3ade102e6</anchor>
      <arglist>(int destAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNeighbor</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>8dd543a1a0b89f98af6d39d28dbd9e74</anchor>
      <arglist>(Mac80211Pkt *af)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findNeighbor</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>3d2c968c5117f491281ddd54f83a7ee5</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findOldestNeighbor</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>967bb2466f35274cc945db0d9e044eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>senseChannelWhileIdle</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>be230265b97330ce9946e4c336b4761c</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Signal *</type>
      <name>createSignal</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>f3931f437864a565081885eba81b6019</anchor>
      <arglist>(simtime_t start, simtime_t length, double power, double bitrate)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseArp *</type>
      <name>arp</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>93a0c8f9b957d3d4cbf787b0db5438cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddr</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac2e4050e1e1277556033521e3a296d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>2d31f97b0662b8e37f090c3b996cec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nav</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>35efb0198d0085a341aba515bec9146f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelSenseRequest *</type>
      <name>contention</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>7bd4f3adc205b150f9fa406fa582f0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelSenseRequest *</type>
      <name>endSifs</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ce80836b6fcb1681f6b2d49466f87fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>chSenseStart</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>8104daf3041394b73fe545427cbc02d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>56fa75f3eb056ae29b1a4b8da0035d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultBitrate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>226566e4a56cfed2928acc87ff3af90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>592eee2a24a6fcadd6fdf912a101719f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFreq</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>67eba657efe23f5e5c21904f4744261d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>126c9db5a54bafa6ad74eb3ee24bd936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catBitrate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>4b0f6dec191e5c70ee11e380deaf2f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoBitrate</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>979883a8da4b308de4a8e79b5bbbe2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>snrThresholds</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>1cd38454a518f922ba57f68d22e2f31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e8892c105c3f0fb2b6f28634bb099f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextIsBroadcast</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>5d8e9b53c8d6cb0116feed506d843e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacPktList</type>
      <name>fromUpperLayer</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>969e8e3a592dffccea28596c61b2af50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>longRetryCounter</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>11fb608b3564e2d2cd41b463b1a8cc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>shortRetryCounter</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>9bbc3d71eddb62c4e12dcd500a58b0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>remainingBackoff</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>58484d1a6f2031548d433d18438042e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>currentIFS</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>4a9d1c8d45c46f18afa0f07f5b6572f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rtsCtsThreshold</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>6ad4dd93415c98c969df05f53d739cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delta</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>b9f0ea820748af6d640569fc76f39659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>neighborhoodCacheSize</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>e62ff2c9617e5782f6f7231e36d1574d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>neighborhoodCacheMaxAge</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ede2e9e4e32ef871e3a59c51564123de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborList</type>
      <name>neighbors</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>4caf1f3c2c004851555c9c691b82edf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>switching</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>9f9f566e85a76f63e63b5907bf9ad48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fsc</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>026837b7167d230bbe79a1e0630c7578</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Mac80211::NeighborEntry</name>
    <filename>a00087.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>address</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>adbe6f8f541201bac1fbae2f338c6fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fsc</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>54b4f074e21cc93867b3ec1462b852f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>age</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>8d031701d56c0382ccf30a090ec07c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>016151640c0c663baf5fdf5dfe741db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacControlInfo</name>
    <filename>a00088.html</filename>
    <member kind="function">
      <type></type>
      <name>MacControlInfo</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>2867d737bc992a554ff8405d4ee7257b</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacControlInfo</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>7d752b5535efb58914c15c36892930e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int</type>
      <name>getNextHopMac</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>2baa654bb07a52e191efc6885e273d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>7004c5dc1ad914e7922b0880b9240559</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextHopMac</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a3f7ff604f9d3347770986c69655b67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyControlInfo</name>
    <filename>a00089.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToPhyControlInfo</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>bf33b668446cb78c5f718de8897457c0</anchor>
      <arglist>(Signal *signal=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyControlInfo</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>d4a56f10fab531b0076aadb0904175b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignal</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>37b1b75e5bc8026af8d3de5bb3b318ab</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function">
      <type>Signal *</type>
      <name>retrieveSignal</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>5e04d8d4088109ccccb7c3fcdae526a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal *</type>
      <name>signal</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>05a564d743e50aa370ee796ee932c8a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyInterface</name>
    <filename>a00090.html</filename>
    <member kind="enumeration">
      <name>BasePhyMessageKinds</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a52b00e54021af4a33a84ac61a7543c7528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a52876c7366bd2bcb675b41e60007831d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_SENSE_REQUEST</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a52a6ff58f5815b155504d37339ee5c7222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AIR_FRAME</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a5296eafe94b4f472727793a10013af7671</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>36bc50a86bf1cc0f9efd374613d61a5225b918f3c2f7bd926610b544bc78497a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyInterface</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>d64ec5441297a309c39bae51cd72fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>8447e9cc66ba633aa11a59387cce477c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>d25abbad9aa16bdbf24bf1dd582b1c6f</anchor>
      <arglist>(int rs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>24e146616912b4a59df91a12b81a38cf</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::map</name>
    <filename>a00091.html</filename>
  </compound>
  <compound kind="class">
    <name>Mapping</name>
    <filename>a00092.html</filename>
    <base>ConstMapping</base>
    <member kind="enumeration">
      <name>InterpolationMethod</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a713c0cd84f74727888bef5b9e8b0643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEPS</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a713c0cd84f74727888bef5b9e8b064314b1d21bd98ca6e7e77dca120dd5eb0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEAREST</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a713c0cd84f74727888bef5b9e8b0643fc951c0875bda3e7b8f6a9f7d4e90d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a713c0cd84f74727888bef5b9e8b0643c8a952576b8d13258ba0f3c0f1584f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>b21dd4d22496e6b5dc34b8b6a55553b1</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>4d721f5e319fdcf56b4285d1368795d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mapping</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>f41509fd27b48035334851487ca0599e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>97d55ce9d61cc11abc5a16b4a594e29d</anchor>
      <arglist>(const Argument &amp;pos, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>efd163bae1529ff13c7c17e257dc1ee9</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>b78335a7a119893d1e04495f7f587ca3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>8723ba0f78d2f259f1f150c9db346cb2</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>3fdd4beb095f7a98e32823d4e031da54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>2aa97c975e2106f1cff4b73e58a20bd9</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>95f064bd4bc5a22aef1cf0e4a6052ec7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>fcd49c5a61e13dfa6041531540a252be</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingIterator</name>
    <filename>a00093.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MappingIterator</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>fd541639ad951794e64291812bc1a1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>c02f525df43671e754d42b43da27acb2</anchor>
      <arglist>(double value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingUtils</name>
    <filename>a00094.html</filename>
    <member kind="typedef">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>MappingBuffer</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>c0e55b49cc1b00d442a9d1f9aa496ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>df03a87cc02707bf9136b305fd795a6f</anchor>
      <arglist>(const DimensionSet &amp;domain=DimensionSet(Dimension::time_static()), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>8ba6c1524fff002deacca99adf25a9a1</anchor>
      <arglist>(double outOfRangeValue, const DimensionSet &amp;domain=DimensionSet(Dimension::time_static()), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>1603f1a8adbeab45c2a928240acb1b85</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, const Argument &amp;intvlStart, const Argument &amp;intvlEnd, Operator op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>3a2a15a55f59a7b67d9e0b9e13982a87</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, Operator op, double outOfRangeVal=0.0, bool contOutOfRange=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>e494014eb3c372a36cc3def07b94060f</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>c118c86aad57a4fd1c55f4634fbeef87</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>09fc5a09881af2b5e2d754477cdeaae5</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a5dc8572e5cb6fd9b90583f3bc18af05</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>2aa32648313b42eb1a51583a0fc436b8</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, double outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>fd8bdb39110d33b2348c09030c36e443</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, double outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>761890e4138e150e164dae5f696013a5</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, double outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>518bea5d2841ec0938f14105c03ca012</anchor>
      <arglist>(ConstMapping &amp;f1, ConstMapping &amp;f2, double outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMax</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>668f67af89ac8cda8542a268f3c48a33</anchor>
      <arglist>(ConstMapping &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMax</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>c76f3cd3abc3549c02b103ea599814e3</anchor>
      <arglist>(ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMin</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>71b1d9b8b3821818ecba6682166d5ed5</anchor>
      <arglist>(ConstMapping &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>findMin</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>22a4fd3b7f3b3180e9248a6f0e2cfb8f</anchor>
      <arglist>(ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>freeMappingBuffer</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>6aeed9eb00a25b92d3882a063ec8d31a</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ConstMapping *</type>
      <name>setMappingBuffer</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>2d5bf672139d07f896e5aa6a55f156f7</anchor>
      <arglist>(ConstMapping *mapping)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ConstMapping *</type>
      <name>createCompatibleMapping</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>99f885fd75e97b3a2193cf667c762067</anchor>
      <arglist>(ConstMapping &amp;src, ConstMapping &amp;dst)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>iterateToNext</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>6a768601098bcb0d998be2c742126433</anchor>
      <arglist>(ConstMappingIterator *it1, ConstMappingIterator *it2)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static MappingBuffer</type>
      <name>mappingBuffer</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>2190ce5197f89db49b5a0acd6b70a92f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMobility</name>
    <filename>a00095.html</filename>
    <base>BaseMobility</base>
    <member kind="enumeration">
      <name>MassMobilityMsgKinds</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>3177859be4c97b50439d5bb66d302ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MK_CHANGE_DIR</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>3177859be4c97b50439d5bb66d302ec88ff56293db4d29c9a740c26238e4b2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_MASS_MOBILITY_KIND</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>3177859be4c97b50439d5bb66d302ec8431d5248b6de503e6134610d953f0853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>2656fd190a68dddb34b37c0d0de3f9de</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>2d22bab49f0a1fe6485e4021cceaea94</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>dbd3d2ba4b0b3440916aae26092bdf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>92652de465e25c5057639645403b1c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeInterval</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>fd45f986e54b3b0b6207d60b1aac1657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeAngleBy</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>c69f80cb3b8f09cd67f4f7004b29a614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentSpeed</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>d2fdb5dfe5b821f68c5e36fd1af747b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentAngle</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>69bf82f29a741021d3da5aa0d8755d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a10b8cb430ec411e7d0621681eafb5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ecc952d94907998cf0fab845f21d2ca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleAccess</name>
    <filename>a00096.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleAccess</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>147bd2ec486150af805e362ff3ee8774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>1daeea11ad3bb0acf22aafadc17d3532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>3799a269aae8d8adb4d4f1dc2f431a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Move</name>
    <filename>a00097.html</filename>
    <base>BBItem</base>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItem *</type>
      <name>parentObject</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>0120adb6940224b82f3ca7db98e2b1c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>d9f0bcbe0844183858a9f9aac955dbb9</anchor>
      <arglist>(const Coord &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>92ec607a60bbee6f48ff3f52d0e4856b</anchor>
      <arglist>(simtime_t actualTime) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>0287300e9580229fdd0c4c2c13e9527d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>startPos</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>84550b4f702ceed03c516754d17950f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>cffecfba78dc80213910498f1afd7cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>direction</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>727f186f109f662811b76aa19dcb58da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>c84984d8a41ce30da0a32b049ff07552</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMapping</name>
    <filename>a00098.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a543697ff1317794364ba4cc7c4f424e</anchor>
      <arglist>(const DimensionSet &amp;myDims, InterpolationMethod intpl=STEPS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>22378173790de78a8d9da84e6bc8f556</anchor>
      <arglist>(const DimensionSet &amp;myDims, double oorv, InterpolationMethod intpl=STEPS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>df3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>f3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>0d0e309e936341d7d3fded2a989d392a</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>2feba1ffea3072d12a130d72f750b98a</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>903bef6518f96f54537beed48002b5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>2aa6a9a6b64954e20c6ee15f4bfb9925</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; double, Mapping *, Interpolator&lt; double, Mapping *, std::map&lt; double, Mapping * &gt;::value_type, std::map&lt; double, Mapping * &gt;::const_iterator &gt; &gt;</type>
      <name>SubFunctionMap</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5153f5caf448f155ad24d3de13c1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>2befeb7f3b132790b4b4dfd8c6ca675c</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, InterpolationMethod intpl=STEPS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>52403f37680de44fd8691631b3008407</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm, InterpolationMethod intpl=STEPS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createSubSignal</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>958ce978e6ddd83f78ac1a9e53d7537d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>dbef2e27d79c3323d48e4c7a731b8274</anchor>
      <arglist>(const MultiDimMapping &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>c0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SubFunctionMap</type>
      <name>entries</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>31a1c2ee3ada1872f0c94351a32f1e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>e9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>MultiDimMappingIterator&lt; Interpolator &gt;</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>6314bc1334b489fad95fbc1affbdb57f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMappingIterator</name>
    <filename>a00099.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>60281ab679beb5b3aff42d24d3d7bb09</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>07b68601d82a9250a0a588be293c1527</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>e4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>bdacfd10ced60995fc18ed70e0314bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>b41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>27ab18edd4c71aa91adc89cd6bc70b22</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; double, Mapping *, Interpolator&lt; double, Mapping *, std::map&lt; double, Mapping * &gt;::value_type, std::map&lt; double, Mapping * &gt;::const_iterator &gt; &gt;</type>
      <name>MapType</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>fcc3ab9e9ecc82e7b1234621435dbe1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MapType::intpl_iterator</type>
      <name>IteratorType</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a82829e037d7bab31ba1f72af88b65eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultiDimMapping&lt; Interpolator &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>c3d27f15010e5cf606804a19874c4cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorType</type>
      <name>valueIt</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>4f88ace89d85c99bc158d9df1cc32c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapType::interpolated</type>
      <name>subMapping</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>9dea3868846990eb0d80e756906cfe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>c2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>fa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>e3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Nearest</name>
    <filename>a00100.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Interpolated&lt; V &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>fd845344584b2ceb4e866aa3c9499eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>47106b348b7e3f6927d1f507c83be6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>5515375c115faa3d95e0a7b28483d33d</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>72ba92f1ddb7087218be33827bbf1134</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ce35bbb0377edb343c12552c10c088ee</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>799ccefb11b52ee02ca345c66c879580</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos, InputIterator upperBound) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PairLess&lt; Pair, Key &gt;</type>
      <name>comp</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>7330aa8797fc81bc99529600e0224bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a1d64f4f22dfe10f63daf936fac7ddf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>outOfRangeVal</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>d47acc3cbe3f14b894c0826a15ad4e3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwControlInfo</name>
    <filename>a00101.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwControlInfo</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>77a3debc492236a7c506a7c02d222d3a</anchor>
      <arglist>(int addr=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwControlInfo</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>8bcbd2cb7ac307be9c2e021f0456e01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int</type>
      <name>getNetwAddr</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>7a9a8d6a6038920fb98965abbbcf6bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetwAddr</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>8d95c470695dbb1315211850e847b404</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>netwAddr</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>10d8e668afa137fcf92fb0b477b7377b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextSmaller</name>
    <filename>a00102.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Interpolated&lt; V &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>93526bec405dd87c4f517cdf8398f43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>d6da8286d02afd33afa7b6056b9fcd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>e1e0a7a9dc40f8e8e77a765365fad222</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ea6dee6ddd7fbace5059072b4b13e946</anchor>
      <arglist>(V oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>355c19dfea5c102b0a69771ecdcfdbb6</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>60369ff8cc9ef56c9f14ec6f9d094824</anchor>
      <arglist>(const InputIterator &amp;first, const InputIterator &amp;last, const Key &amp;pos, InputIterator upperBound) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PairLess&lt; Pair, Key &gt;</type>
      <name>comp</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>4c18f8308d0c9fe995d0be6cac70de62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>17eb7bc83b66b4be83cfb1f5247972b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>outOfRangeVal</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>536351df1d5b194f29e0fa8accac06b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry</name>
    <filename>a00103.html</filename>
    <member kind="typedef">
      <type>std::map&lt; const NicEntry *, cGate * &gt;</type>
      <name>GateList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>8d9d00719f7c612c9af58424a742ccfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>59345a3d9d2a9c6b85ff968e87cf7552</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>fd3d4871304939e9dcbfda49b3ca4585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>32a71bf1823d8ca0d51fd1cbb67072fe</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>0cce4edbe3eb6036ded986482de3de48</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>731c307d3c7d07c50c5b663192682a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>32f9544fbf045d921b0fb7f1c6f51f9a</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>009149376663e2250c24634879038f7a</anchor>
      <arglist>(const NicEntry *to)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>587d8ee15931df8209b6429b8f81a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>f7819e950101d5062b713eb4c182e34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>f474d9b383b959daecdecce577edcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>2c78b2c598d5fa3d44080f682adb8d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelAccess *</type>
      <name>chAccess</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>8494481fbac4b6efb1166986a18edf58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>f0a6ff3792dac4c0a956b1a16392cf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>66b957327e66c042028f7b38e4bd0b46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDebug</name>
    <filename>a00104.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>8a318f2611c8fcf9a495525a910f40b6</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDebug</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>23514a51dfbdba46bf20b2f005a34214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>6f8182aba0b4ac7863e7eeb26ebc8431</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>e215194c90e2594b77bb02287a45accb</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a028678e801ba669ad47a6588b2ad90a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>d601c375fa2fd737f88b3a475a06ff45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>c676487d56ac68916121ce8e52465205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>f1bf7c23c872e6838f8111cf58e4839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>freeInGates</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>d35a361137e5caa7e2e8cd82dd4f125d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>freeOutGates</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ef070bc4f6c47eafd302dfc66ef67a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDirect</name>
    <filename>a00105.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>264c9a96612b45f99eb5a1de1dd2b7fb</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDirect</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>21eb6f7a68d1dc62b30934651b569ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>56d5f3eb121f931265299294660d70e9</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>4629b3bf3dc1836590016164bd245149</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoNextIteratorException</name>
    <filename>a00106.html</filename>
  </compound>
  <compound kind="class">
    <name>PairLess</name>
    <filename>a00107.html</filename>
    <templarg>Pair</templarg>
    <templarg>Key</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>29683112f68dc530fd2b0f52a5ea3d5b</anchor>
      <arglist>(const Pair &amp;p, const Key &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>91c986fc168fc7b305d68f185ddb849d</anchor>
      <arglist>(const Key &amp;v, const Pair &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassedMessage</name>
    <filename>a00108.html</filename>
    <base>BBItem</base>
    <member kind="enumeration">
      <name>gates_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>7738b6f08855f784d1012de87fbfd9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_DATA</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>7738b6f08855f784d1012de87fbfd9e6df76d3ca7bb9a62bed70965639d59859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_CONTROL</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>7738b6f08855f784d1012de87fbfd9e6ea991e99dac6c91c9e3e89f902f1075d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_DATA</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>7738b6f08855f784d1012de87fbfd9e697265ac51f333c88508670c5d3f5ded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_CONTROL</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>7738b6f08855f784d1012de87fbfd9e6fb379d2a15495f1ef2f290dc9ac97299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>direction_t</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>11c83e74aa007c495b32ec3ed4953a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCOMING</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>11c83e74aa007c495b32ec3ed4953a5043c42d4afa45cd04736e0d59167260a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTGOING</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>11c83e74aa007c495b32ec3ed4953a50862e80d4bad52c451a413eef983c16ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItem *</type>
      <name>parentObject</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>2d0f0e6e8997448c23487757def68a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>gateToString</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>0f73ac5c7a0ae569ed1fa432a7a58048</anchor>
      <arglist>(gates_t g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fromModule</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>6c340595cb29a4e8a4c55ea0503dffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gates_t</type>
      <name>gateType</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>41f11b3139f3552cf2de3bb648c1ff55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>direction_t</type>
      <name>direction</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>f55219a6ed1e656af091cb7583467f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kind</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>b4e2bf6d2317196af7e9c98ed2c406a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>8a4eb44ad1e43205d1881fec0c00a6d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayer</name>
    <filename>a00109.html</filename>
    <base>BasePhyLayer</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>98adffcb346116dd40d956085dd906a5</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeSimplePathlossModel</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>d57d9f17448d62f9ffd2b8cbfdefaaea</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeLogNormalShadowing</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>f5a56536274e9475981a275005312d41</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeJakesFading</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>f3d6d0544e6f7358a1cf025e1b61a08f</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a09a8558e04d2aba287be91d7fbd2548</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>initializeDecider80211</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>073b8a953e94f4077f7e81cd08a31eca</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>initializeSNRThresholdDecider</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>9e840681123b7cbd03f7310598ee20a9</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayerBattery</name>
    <filename>a00110.html</filename>
    <base>PhyLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>815f95ad9fe89412ff3c5991ec1cfafe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>73a5457ba5a50d2d061a4cbf7dbd96b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>d6bd7ad4b0180287c2556066ed067c65</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>808fc8fc16c1bd4d2e865a6dc897ff4d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>b687d180a389989e036e158765fe6f29</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="enumeration">
      <name>Activities</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>1eb13993a65f4147d7f99c936b4143c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP_ACCT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>1eb13993a65f4147d7f99c936b4143c7f8ca1afa02415cbbe5b6fd238c39d234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE_ACCT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>1eb13993a65f4147d7f99c936b4143c7cba49a8be79bc35b275f5c7fcc503d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX_ACCT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>1eb13993a65f4147d7f99c936b4143c780381a36236673b743ebdec188ca5dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_ACCT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>1eb13993a65f4147d7f99c936b4143c7e1baed9a9981c073215cdd7c0a6658ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>7d09d3b83e7a6ad89682101aaa084579</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>initializeDecider80211Battery</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>85f00b8792329952e92264e16e133dcf</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numActivities</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>0100994772e797d41df4c41b4b9ad475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sleepCurrent</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>15d15867a1ac057d60b8dc4a3771ce1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>idleCurrent</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>45de122b4fe14ce856654d72d5cae3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxCurrent</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>43b742fc7d58613cd7cd82547ae72ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txCurrent</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>99d73bba9a336c5d544628eb898f06ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyToMacControlInfo</name>
    <filename>a00111.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>8e9300c49e9f955c4b5333da109143d4</anchor>
      <arglist>(DeciderResult *result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhyToMacControlInfo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>878543dd35632ad079125104960ece32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>0a8f38d6c909e129752f88c8f1377e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderResult *</type>
      <name>result</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>1dc106d6290a2f4f18b4281e14077545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Radio</name>
    <filename>a00112.html</filename>
    <member kind="enumeration">
      <name>RadioState</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffa0a9f9ba2fd83cf0f5f4eaf4f32d6a9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffa55eab2480eb0876c6b76dc0df92882f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffac023b5b1d5d9ddbbff72007fb46449a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCHING</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffa6519b535977bcb0a1a70ec6259c1cb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_RADIO_STATES</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7314de88eaecfa054e682ccc84ef0ffa8da48e8e62858b5c327db67d526d060c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Radio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>6f3d949a5e09c5d38887273e982c734f</anchor>
      <arglist>(int initialState=RX, double minAtt=1.0, double maxAtt=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Radio</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>29debcd5a10f48aaa1df6cf28da79873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>switchTo</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>615c12ca30bd915fd030c5fa1a81d0c8</anchor>
      <arglist>(int newState, simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSwitchTime</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>fcf12d0322d579b330a5a28d32ab8c5b</anchor>
      <arglist>(int from, int to, simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentState</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>1c9dcb8d49198c04d9001732e8c4421e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endSwitch</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>c37d427d9200c9ee5cde23e2b469f5f3</anchor>
      <arglist>(simtime_t now)</arglist>
    </member>
    <member kind="function">
      <type>RadioStateAnalogueModel *</type>
      <name>getAnalogueModel</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>4903c7a92d2d890c04b27bbdf133cf92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanAnalogueModelUntil</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>629c6360c5ae7608c37c5c46eae04f2c</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeRSAMEntry</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>7998737bfb657f69ddb9c199499d4f1e</anchor>
      <arglist>(simtime_t time, int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>mapStateToAtt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>8dff66d0cee3ac3618bf70292ba60af0</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>e4346f81181327cb3a20350b775d4e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextState</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>764847977db60861bf2f307860eb71c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numRadioStates</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>f5d634f5d958e278cdd14d76c3ee5227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t **</type>
      <name>swTimes</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>c1b1b9d714b4be07e364582fa5f26b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>minAtt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ce88ba24573764780744da4962f0f5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>maxAtt</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>17c29ca1bf56277132bc4d52534aaa7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioStateAnalogueModel</type>
      <name>rsam</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>409b73b9be7b5bafc746406a3c6e3081</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel</name>
    <filename>a00113.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <member kind="function">
      <type></type>
      <name>RadioStateAnalogueModel</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>b02ae65f079ab5d2f2bd967b551d6384</anchor>
      <arglist>(double initValue, bool currentlyTracking=true, simtime_t initTime=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadioStateAnalogueModel</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>c076409f51f9df8493e3cccf03428445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>5deb97ebb47b1e2e26f45cd8d3f5e916</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>9a3457871c28e3e86759f70a9def9f28</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUpUntil</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>45c41f132d4f928e74ebd011668e1f17</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRecvEntry</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ce9a38fbb5e55ee098fc6604e826788d</anchor>
      <arglist>(simtime_t time, double value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>currentlyTracking</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>576c1bc7398c256153ac9e22bbc84f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ListEntry &gt;</type>
      <name>radioIsReceiving</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>65205e0c07b6e08e7fa236ebf4f052e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMMapping</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>6ec9262901fa86ea2ef6d08fc9410144</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>b901736afc45f0b8dbe019c39356aa09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel::ListEntry</name>
    <filename>a00114.html</filename>
    <member kind="function">
      <type></type>
      <name>ListEntry</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>3fc741bf8d71f76627c4cabb1cdb2142</anchor>
      <arglist>(simtime_t time, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListEntry</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>de75614e1843674432f4f3109da28999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTime</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>d1695bd2a9c109c69efa6ef248267078</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>0ff05521a541a9fb77ffd1acf5ed599f</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>608d0d3fd2c8a86bd880188af7f8b5cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>e1882415e537e0b31c7798977e4c0e18</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; simtime_t, double &gt;</type>
      <name>basicTimestamp</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>612bcfd425207b239ec965148083602f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>8c47995f6607bcbfd28b494582de0a40</anchor>
      <arglist>(const ListEntry &amp;e, const simtime_t &amp;t)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>826615cf375c4118449aa4c8519df244</anchor>
      <arglist>(const simtime_t &amp;t, const ListEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomFreqTimeModel</name>
    <filename>a00115.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>RandomFreqTimeModel</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>f43a3836fe69642419f7577942aaa810</anchor>
      <arglist>(int seed=23)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>386c52d443d744c969d5d0b97550ada7</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>90eae73608986a38d5dcd71c4ddce7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>918823c159b50a6f90c51c1b79b9018a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomFrequencyOnlyModel</name>
    <filename>a00116.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>RandomFrequencyOnlyModel</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>7f2a29b2108609ff9f1549ee74668ffc</anchor>
      <arglist>(int seed=23)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ccc0bc5ccbee89046fc32cab8d73b5e6</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>be40315d1e83aab5a999278cd7f2da6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>42f3ab529c90ee41904e5cc95fae5bd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleMobility</name>
    <filename>a00117.html</filename>
    <base>BaseMobility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>58a5e54bdbbce2fb22beba47d65db2ca</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>9d91106b21a2b8250a212f20b039d040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>110729253753741b74f632950f241e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateXY</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>312aef1943f93b86ee58b1ca282b01c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>68cee2e62a6803716d0526cefc1da76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>6cf4ff4a69a687530cd660951031bef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>b948a3d2c1aad2652c77b0ba7f0b9fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>cd56df4cf5cc3967a0c6578ce428922a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a83622f27b0d73d7d4f4dad3dde4d7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>1cbbe28da9bb02adb85d20443b532661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>1b7ab4275ae23da11aaa267676966e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner3</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ff489c70c030aec6f6bcb2f25979001e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner4</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>fb7594642fcbc485adf6996b73fb57c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ffd73cd8173f71ad1b78c52ad1192721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RepeatTimer</name>
    <filename>a00118.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ed581ecae75a069fa00d54f72953332e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>5e4b217c88763b1a7a8d2b072ee44b84</anchor>
      <arglist>(unsigned int index, double period, int repeats=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>1c1a6b2210cba41a364d9b5b544153da</anchor>
      <arglist>(double period, int repeats=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>6e72b4413b10c90bb44f553c7e4f510f</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>dae0bd9707083c356ff88fd4e39a983f</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllRepeatTimers</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>0267db67e015e94d35556ed808a2e1d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timerExists</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>69d2d502fb4c5cf3645b2da9e2ab65fd</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>remainingRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>9fae6fa80cab629abc50133eea3d9a56</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>63b9b4c9cb118856866981941e3f6758</anchor>
      <arglist>(unsigned int index, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contextPointer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>24e5a0c858b4e9f50d2ff1c54372a93a</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextDestructor</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>71d3da212e06c9d47e7b75a499cb17dc</anchor>
      <arglist>(unsigned int index, void(*func)(void *data))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateRepeatTimers</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>8e488615e14e5303855c635fde9091d7</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>c526a54dbbaa00bc442276801d67595d</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>0bd4002ff53a1eef20bcce80a1ab776a</anchor>
      <arglist>(BaseModule *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRepeatTimer</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>4d12f90e639e0e2e4156146cac7b7f50</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RepeatTimerCore *</type>
      <name>core</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>e8c26ae0ede4360d4e552bf367cf489d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseModule *</type>
      <name>owner</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>1f56a41e906a2317ffb2df552d6fcd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RepeatTimerCore</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ccb402f6882a62b7c8b1f31e8437db23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RepeatTimerCore</name>
    <filename>a00119.html</filename>
    <base>BaseModule</base>
    <class kind="struct">RepeatTimerCore::TInfo</class>
    <member kind="function">
      <type>typedef void()</type>
      <name>cleanup</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>f22f6768bcc938a73946061e2cc73e6c</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RepeatTimerCore</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>43ae56c7a622c2aa458698db5dce5f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>6caeeb9de769cf46504a73f352ec8bd6</anchor>
      <arglist>(RepeatTimer *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>65dd7daa73a40412eaa3def7b2813c45</anchor>
      <arglist>(unsigned int index, double when, int repeats=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>5314097324bd92bb7d240588c7d19be7</anchor>
      <arglist>(double when, int repeats=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>27a4d9a730ab5efb061441cb261c2e8d</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>eadbc7a06179f6a7870ea46169a1f30e</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllRepeatTimers</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>d2cdf9aa45928564209d940b26583964</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timerExists</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>bc21fcbffdeebf8777ec6e16f70a3943</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>remainingRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>57d48d125a6817100f1dc268ee7f459f</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>8f1c7042f3839169ed81dab77331181d</anchor>
      <arglist>(unsigned int index, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contextPointer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>52ac7e8ea3cdc665227b68c3e7714d9c</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextDestructor</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>52761876d0a1b4dbccce3b298633d9fc</anchor>
      <arglist>(unsigned int index, cleanup *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateRepeatTimers</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>d4cebcec6801976d1880d12ea3c49bb2</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRepeatTimer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>60bf9fac3b9ba698c82eb10d3821910c</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkExists</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>22ec0a3afd2c88ecf35f751db256ca88</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>7a5b0f4ce504078858436b7c3dc319f6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RepeatTimer *</type>
      <name>timer</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>6ce8d26027a45251cec10648a3c06c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, TInfo &gt; *</type>
      <name>timer_map</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>681c276da7a7ef23facfa8e416c4fad9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RepeatTimerCore::TInfo</name>
    <filename>a00120.html</filename>
    <member kind="variable">
      <type>cMessage *</type>
      <name>timer</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>e7c55512f454c2798eef202204a1f56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cleanup *</type>
      <name>destructor</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>754fbb3332aafa38c76303fd44c5d6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>repeats</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>c1cd7fc8d5d569bf0d1cf9e8d337cb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>7a301105439cfde06032ebcbe229b785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>when</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>3aabbf350274447f521e2637161e1c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMConstMappingIterator</name>
    <filename>a00121.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>e9bfee34024c42618fdda0a089b51876</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t signalStart, simtime_t signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMConstMappingIterator</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>94df8b87b252de13463b326c7d77e3cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>07fd56b95f802e1c510d24b505778d80</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>4964c650666804df3be8fca3fe5a4908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>3a34a4fb1e22f7e0bbac13e21d08415e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ffcdaea232a2f67a59750ec3817e7998</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>919ae04b93ed239dc2f5566a383f28d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>3448ebfa3c53442e991978a58206d305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ecbf3b4f6557ff8fd02d55519827b91e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>f465b20a9a50c6640289e7f53f26134d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>35441df57b5a398c15aefd4696ac9e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>d538f1b607d378385fb2bf13bb1daa1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateToOverZeroSwitches</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>0ff28e4a2157811db38b7f4fa433fcac</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; RadioStateAnalogueModel::ListEntry &gt;</type>
      <name>CurrList</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>b27af19743434c8f938fa12240ce2b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ad2e47c90690500114b0715ac93fdea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CurrList::const_iterator</type>
      <name>it</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>611fd29b7a53da28738c0871132fcc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>9039bc33a7d35f7fefa980d1bc48ad5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>926d1e5571f715a515233de3f245dea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>44e62faddab1436a85e70e80d00080ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>1f51b46c71a890d8331afb993bf1cc54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMMapping</name>
    <filename>a00122.html</filename>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>RSAMMapping</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>d8c545f30b261fea3160f7d9c6df3976</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t signalStart, simtime_t signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMMapping</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>91e61fbd18ee4bc68238fc13faa48c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>21dc08f08a33cbd4d97a4b3790a47d10</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>1037cdfec2afd5e02fe69487fbf646e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>143e1e64ff95e5f03ee39a51b13d0d9c</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>7b47c38b2b2c98e251db268c9fe4ce6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>1e968e40c9c6d55ef033aea16dc7cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>83073d619992a38be77157eeaa8de677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>c4a1ed01e6319d66ada6b7bab12ce93f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplePhyLayer</name>
    <filename>a00123.html</filename>
    <base>PhyLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>51d4997ab7973ee4b174ae49fb9b658f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ea91987fbece2dea329cf0a24dfa5450</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>5c7715228c82a99be72e75646deae0a3</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>5a4b25681dcaabb77363361fbb87be53</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>5a1cad5e4f0e2d618db45aad25f1c426</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>createRandomFreqTimeModel</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>60a886e10c89c1e1701cc1ea18397a31</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>createRandomFrequencyOnlyModel</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>6fa606188ce17eea95a1fe645b93aa6f</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>92f8ad35c7cfed1e712ee00ead259aee</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>1e1689f12711fd9623460fc6c25a2ea3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Signal</name>
    <filename>a00124.html</filename>
    <member kind="typedef">
      <type>ConcatConstMapping&lt; std::multiplies&lt; double &gt; &gt;</type>
      <name>MultipliedMapping</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>484a5f8dfebfd933edcb1a55770df0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>ConstMappingList</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>463671c45cf3099eb81d8840c86a27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>23d1ba7fb1be28b4af1814870a097fca</anchor>
      <arglist>(simtime_t start=-1.0, simtime_t length=-1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>079cc6bee7380f5744001d5f26505b2c</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9c8501095ecc3fb4a60f4f0e2007138</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>e7a1d116cda63e790bf9aab549d57d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSignalStart</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>67358914ffdd97d4c08c051e6849c500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Move</type>
      <name>getMove</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>c748a79923bbf3685ab652f23f3ff661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMove</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>76f3a8df29f641a296a9260961776a28</anchor>
      <arglist>(Move &amp;move)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSignalLength</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>45626a4b652952d4b7d25b32164d417b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getPropagationDelay</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ece46d2aebd821d8f85d57602bc3c96b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>f934d43a057c096cd189c07f1ed1ff04</anchor>
      <arglist>(simtime_t delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransmissionPower</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>d8c5494d0f7bd564bf14dc0c90f9a361</anchor>
      <arglist>(ConstMapping *power)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>86e4ecdabd5ca03ede5e2c81c6b76002</anchor>
      <arglist>(Mapping *bitrate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAttenuation</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>0beeef0f27c33145a0fca521df1c5f5c</anchor>
      <arglist>(ConstMapping *att)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>392ecf1a624edfb90243e7227370a772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>5e8552f0d95e8faea2dee32ee7ba7212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>getBitrate</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>dfd5ce93e172004046d7714eaefb36c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMappingList &amp;</type>
      <name>getAttenuation</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>9b949d4e6bd18f6baccd66748c2bcd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MultipliedMapping *</type>
      <name>getReceivingPower</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>513b1abac0b04549585257f7f5f8ebea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markRcvPowerOutdated</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>594e926b3d8ff3330375c8850699ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>839bf4acb28236f083a7f807faa179c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalLength</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>1a28c888abd81173017f516a2e7fd992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>propDelay</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>81bfcb4c715c2081e9c99b5895bdc6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>senderMovement</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>41dc458cd342773963154a94d0c6fb2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>power</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>3570fb45af2a0f7580ee32c57e90e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>bitrate</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>4a6e1ad1165fc73157c8820739011e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>txBitrate</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>c60bce52288a4fc2067aa394918edf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingList</type>
      <name>attenuations</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>1fb9da7932d7c4746f2afaaa21153cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultipliedMapping *</type>
      <name>rcvPower</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>9e3d433a61e8188c8a6de5b540da8d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleBattery</name>
    <filename>a00125.html</filename>
    <base>BaseBattery</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>02f43017e7f375fb12a3299f929f99d3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>6741c08be8212fe0fe2786285157b991</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ad95dbfe21ea8354b02af1e9b4d387f7</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>06b1ab5eb89e7cf72c0660eb5ed68f31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVoltage</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>403eeddc66979f80bcbab6256fbea097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>1540f8891c6fb4c88954d5e211c3294b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>166d6400349db260f5edb0efc99727fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>bb7866a326788b64466534c95ccb2b52</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae7228c50e302f9f30eea0f1e69ba38b</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int activity)</arglist>
    </member>
    <member kind="enumeration">
      <name>msgType</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>2027a9cfdf410e246a3cb90acbfad6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTO_UPDATE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>2027a9cfdf410e246a3cb90acbfad6ddafce8bded973acced9e324d46ecadc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBLISH</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>2027a9cfdf410e246a3cb90acbfad6dd075840ecb4535c2a8aad91b0c820937f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deductAndCheck</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>86c19e96a41b6edd8cce5f7da782966a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDevices</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>713465d20e40c275f105d9cdff32b3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>capmAh</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>05d65f8b333b68eec48de0888f68261c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominalCapmAh</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>318d762eb5c65237eb9aca0bf0e6d880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>voltage</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ac296663af4d156e5b31f868abb5f7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>resolution</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>df9aa194bb0405e0d1d504a2f4e2562a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>f47d0bb558d32ae4c079feec825a301f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>batteryCat</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>0f2be45a3661df72883bcbb24e4879a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>publish</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>d7d03f71f85f952de696f906a5f16e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>publishDelta</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>134a4882fa54badf6ac61bf7ca85c40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>publishTime</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>c6a51f675a5ff7cd53c79a87a8a8396e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BatteryState *</type>
      <name>batteryState</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>d65a4502e96576b1e12332dbb19a1f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>scopeHost</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>f3d5d1402a3f989ae7299e773bdcdaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostStateCat</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>4af03281b995a051ef37dbea4ee366ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostState</type>
      <name>hostState</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>2ce6f955ec0e80f98ccbabfdc9d5d1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>capacity</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>167d1f32b5590266ae038c1ad9930d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominalCapacity</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>605d3891d36cfc5fe20908588ffff385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualCapacity</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>161908772ca511a1ff0bac0c171b1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lastPublishCapacity</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>7f84316e88869a105abb59205cec3c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lifetime</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>17e06cb38be96647528fa58ba7457f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualVec</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>7ac70c949d5974651eb5c669f10352d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeviceEntry *</type>
      <name>devices</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>1667f1336167e09b40dc3ab3b94f05d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>registeredDevices</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ca990f2e71c484694cb93bf2fe5cf29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdateTime</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>1cd5c7fa6c929f92176c2280074bc721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMapping</name>
    <filename>a00126.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>bd376821251c50a05d67b855778ae4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>f3d5b0778c3626f2490087fb2a4abc68</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>0794f7d9a8afe0dc17232211eb451302</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>2e89eb287b66b66bec570afa716a7e78</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>8ad8dfd538dabda7d637819a2f34a1b5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>cd1a6f80289031ea0f5ccc6b29cae9d5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>17d3c5e8c98e7451a844d59c95c7272a</anchor>
      <arglist>(const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>8555ecac0cfcfdcc07d540a640975607</anchor>
      <arglist>(const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ca948c360cd24e21a92c80bf5f53cf16</anchor>
      <arglist>(const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>6e6912b46c8b183bd2dfb23448a76ce2</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>49da397ee4ea25a6bdcf7f08dc6e2ed5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>4a48a5d4281c2bf8eda6b0cd96fb67e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>3804bf19eee40fe09c626b7ca9e0885e</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6f392c0904f66eb264c597980873367</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, DimensionSet::const_iterator curDim, Argument &amp;pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet</type>
      <name>keyEntries</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>022d4ae04338d12fad79f4e2f9b1f7af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMappingIterator</name>
    <filename>a00127.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>eb4e73de97456f20b4f4dbd413b9aba5</anchor>
      <arglist>(ConstMapping *mapping, const std::set&lt; Argument &gt; *keyEntries, const Argument &amp;start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>d5087cd41e797d3835884f5b3e10dccd</anchor>
      <arglist>(ConstMapping *mapping, const std::set&lt; Argument &gt; *keyEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>e024ecc6a05c06a6c1f80cd594c387a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>810c8af9b437ac5bd010cf5f4b154045</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ff0c387e3cc73d9821078492ae90e82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>f63f318fde0e50bc3383ebf1686d4a7a</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>4984e94b5c551edac1270dc35db8e02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>25c1a14b6104fd53f38f1ffaa0555864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>7d5c3fb31916385945abed1d6a38f797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>54d571cc74688a5ce0b23a8d8ba5f04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>2930a2750904db64126bcf5760d28ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>cd382b24005d9a14b143b6efd5922eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>95c8abb4ceb08625b2e27d27b2cec2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>3972163e1019d8eabb3c873a826d5d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>d33c6050d2b2bfa6fc4b1c9577959df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyEntrySet *</type>
      <name>keyEntries</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>55107a3430801eefc9c6130995f7e98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet::const_iterator</type>
      <name>nextEntry</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>4e274fc2e3dc1900b7c210509fc34513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleMacLayer</name>
    <filename>a00128.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>9a23cdc88daa658398f0bc10ac4ed219</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>54dbbc7fdd99fc056baab98061420258</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumvalue">
      <name>TEST_MACPKT</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>bfa6d561f6a78e4067a27434d766225f4b9a5853e8ca522bc3f0be62c042d894</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>549a96e538c0d97ea06344c7fb0481ee</anchor>
      <arglist>(simtime_t time, simtime_t length, double freqFrom, double freqTo, double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMacPkt</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>91e83a4243796e1614c3cfa423f03d49</anchor>
      <arglist>(MacPkt *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTXOver</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ffce6782f24929b0620d77e43849cd1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>broadCastPacket</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>24a84df3fe2796c6ef724227dd6293bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>00e2a106b0e32dbef1a868227abe500d</anchor>
      <arglist>(MacPkt *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MacPkt *</type>
      <name>createMacPkt</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>81852b94aa76931fb7823b1f57a9b873</anchor>
      <arglist>(simtime_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>40e1a41bf783a5ca9525dcbfca6d7ace</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>d7ed88006647e680895f4737464fc639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>6bef5234e57995505bed24b48e68f77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ba6cf264f7ce298a44fc553a1de23f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>4ee5bbf3e42982965d1740163b5205db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextReceiver</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>3bbbe1760cc9e088ac5c17c23189e0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>22ca1a18e1bed2f5875c1cca654a9a88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNetwLayer</name>
    <filename>a00129.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>20a43187e836ef7fb9c26a6132b3b77a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa9b0e59e71d913a0bc99f94937e4f05</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>NetwPktKind</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>00889eddbb937367c642ba2a2102b68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HELLO_WORLD</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>00889eddbb937367c642ba2a2102b68aabaa31d9450f36603139206a0e72d7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JABBER</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>00889eddbb937367c642ba2a2102b68a3f544e293273a453dfd732920c939824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>START_TO_JABBER</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>00889eddbb937367c642ba2a2102b68a86807fcbbe2e70788129298e19284ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>RoutingTable</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>de8f47d993aeea44f5fe8176c292869d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleJabbering</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>c3193be4e1d6fef90e4d11dcfb5ed548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>broadcastHelloWorld</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>6bb1c14cc91edf63fbd14094d54d360c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>3753816b0cd2b1a4d3853478aa364e33</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardPacket</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>d7daf9160f08cda82da160e8e6bf7d78</anchor>
      <arglist>(NetwPkt *pkt, int nextHop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHelloWorld</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>9e2b3396e130fb00401caed628a4c0d4</anchor>
      <arglist>(NetwPkt *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>jabberToSomeone</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>9ef840887cbe3ea722d44ac83a1047e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIncomingJabber</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>cd283af74870c8ee6eaeaf402936868f</anchor>
      <arglist>(NetwPkt *pkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSwitch</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>b61a4f00f3f8d2b3637c295f95b5fc8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>boredTime</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>e44adf1777151868d82ca8aba469378b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxTtl</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>e0f6b3a439c56cd2275a3f10d8a9a691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ip</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ee69c1d8ff786f27407fc429f828b590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>58834b1edd6cc63bcd522581cc0250ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>532bbd6a5172956ed9ae000f55fae8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startJabberTimer</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>926095a2ae602b9a2773349160b12dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>runningSeqNumber</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>bc490acad686c553452e30d46eca00bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable</type>
      <name>routingTable</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4b573bb29f586e194db8ac015b99e99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossConstMapping</name>
    <filename>a00130.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>05ca5384df78435f54d6126651daaaa4</anchor>
      <arglist>(const DimensionSet &amp;dimensions, SimplePathlossModel *model, const double distFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a263547a6e528cc1acf88fc496510e40</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>07a068298d3682405c07849bbcafac3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>distFactor</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>5256f04ca6630c73e38c611472d330a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimplePathlossModel *</type>
      <name>model</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>cd7441a6db213de39f2286e7e91110b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasFrequency</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>f4da6a90c9477ea1de2eccfd9ae95e55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossModel</name>
    <filename>a00131.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossModel</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>5e1edba222ab0e05a022a16258f983d4</anchor>
      <arglist>(double alpha, double carrierFrequency, const Move *myMove, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>cc9774a805b22fb6658672bf1eeec004</anchor>
      <arglist>(Signal &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcPathloss</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>0895447b8b1b0666b76c421d8ca1b2b5</anchor>
      <arglist>(const Coord &amp;myPos, const Coord &amp;sendersPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>064c70c5c35a1bcb1d6450722d70ec1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>48902a15501db259c953348f4d50313a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Move &amp;</type>
      <name>myMove</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>eed41aa4f29347a19fb61eedcd7149c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>b6305bce0317842e0931aebdfb525e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>5ba93764d5161a8ab7b299a930f3382d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>659b7135ed6ca2282617b863362f21f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>917f0958441d102331b9adf788fd63c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SNRThresholdDecider</name>
    <filename>a00132.html</filename>
    <base>BaseDecider</base>
    <member kind="function">
      <type></type>
      <name>SNRThresholdDecider</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>2ec832714938dcda857aa460629216f6</anchor>
      <arglist>(DeciderToPhyInterface *phy, double threshold, double sensitivity, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNRThresholdDecider</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>c07c187348a6d669285c822cc6b94a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkIfAboveThreshold</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>05faed4b0bb0dff3e93ea7750836bc1c</anchor>
      <arglist>(Mapping *map, simtime_t start, simtime_t end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>6002f2ee8ffa35ded0162c72f93c9fba</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>bdb6b19743460a19e900c4b6d38c483b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestApplLayer</name>
    <filename>a00133.html</filename>
    <base>BaseApplLayer</base>
    <member kind="enumeration">
      <name>TestApplMessageKinds</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>3d99b89890ea7f156487ab5570f5b898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_BROADCAST_TIMER</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>3d99b89890ea7f156487ab5570f5b8981f09660a43209150698cbd1ec9509075</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROADCAST_MESSAGE</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>3d99b89890ea7f156487ab5570f5b898030c51d372096d19dc0ffeb7510b396a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROADCAST_REPLY_MESSAGE</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>3d99b89890ea7f156487ab5570f5b89847052a9ca7f4a854a482f60e7d2b43e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_TEST_APPL_MESSAGE_KIND</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>3d99b89890ea7f156487ab5570f5b898ceffe3ed87c0e918804fff040c8130c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>8df32483962ebc40e1eed225716e54cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>fc9f94dad6a37236286582a08e1fa54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>7cc6a018758d27f31133de05804281f8</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>f64945ae392b392418574b58b76232b9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBroadcast</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>acf2004acd42e50fe4c46bdc3dcffbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendReply</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>f1d3f3a3be9478119f118beeb5b4ad85</anchor>
      <arglist>(ApplPkt *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>e46c2fd464821d8ffb07fc0588623d23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThresholdDecider</name>
    <filename>a00134.html</filename>
    <base>Decider</base>
    <member kind="function">
      <type></type>
      <name>ThresholdDecider</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a94a0efd825447ba1e5d775e8ceda78e</anchor>
      <arglist>(DeciderToPhyInterface *phy, int myIndex, double threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>d33ed828b43e7cc36fa922e62238e61c</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>cd417d098f98ed5ff605f3d3d3ae9969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>f67f3a22ff4eaf2e77e2e71d04885040</anchor>
      <arglist>(ChannelSenseRequest *)</arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>bc76ea0bb10a49e7a1dbe62d0d5e208bda2558f30f22708895cee1685ff09a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEADER_OVER</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>bc76ea0bb10a49e7a1dbe62d0d5e208b979b61ba51da0cd23a4eca35e60b8c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_OVER</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>bc76ea0bb10a49e7a1dbe62d0d5e208bf0611ca3f7c07534d3bba6a393169ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleNewSignal</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>0d05cb7c20aff520229a8a051f1f63d3</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleHeaderOver</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>5cca0d77477336f95f56215d7a43c704</anchor>
      <arglist>(std::map&lt; Signal *, int &gt;::iterator &amp;it)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleSignalOver</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>3a7c8f8137a4f9f7f16c746120f90c0f</anchor>
      <arglist>(std::map&lt; Signal *, int &gt;::iterator &amp;it, AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>16c7166b8c0f48e3781cb2524abeff4b</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>toDecibel</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>431183db0fe1f31506eec3828fa2271b</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>fafe3ac28a8e666225fcf3f508aa1ebd</anchor>
      <arglist>(T v, unsigned int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>4bdb9ec93831be12f5e88df58e59341b</anchor>
      <arglist>(simtime_t v, unsigned int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printMapping</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>c4ff44777f67f8be77c3d028f14e5859</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>79efdf2aeae37558e081ca0850ef9050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>b216c5d8999489f418afab2308e606b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Signal *, int &gt;</type>
      <name>currentSignals</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>dba3e2c16d773850acaacf8d7d7bf11d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMapping</name>
    <filename>a00135.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>7cc93a0f6c2bf00a98ecf0a5765259a6</anchor>
      <arglist>(InterpolationMethod intpl=LINEAR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>35665fc587537e4eade096a4ad2a4fbc</anchor>
      <arglist>(double outOfRangeVal, InterpolationMethod intpl=LINEAR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>3d9bde06fb3d637992eb3e60135d96c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>3643e0352c72705605bf838a740e9d92</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>8a2805429670ca904dda08dbf806f1a2</anchor>
      <arglist>(const Argument &amp;pos, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>99f25f5769ab59fd41080fedfa0dbaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>46c922604b76bf239263820a34a6ff29</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, double &gt;</type>
      <name>MapType</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>007df98f07693a42f66f8c8b64699baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; simtime_t, double, Interpolator&lt; simtime_t, double, MapType::value_type, MapType::const_iterator &gt; &gt;</type>
      <name>ValueMap</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>54fdd4ae0c4217b214543dd35e39cca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueMap</type>
      <name>entries</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>897a97664af88e7bd685cc4e40a4e9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isStepMapping</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ccc712c944704f86d7998424185e3834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMappingIterator</name>
    <filename>a00136.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>TimeMappingIterator</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>c55d1af33316ec7612fb8be7d2100789</anchor>
      <arglist>(IteratorType it, bool isStepMapping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>41457ef9679298443d01dd5d29d63864</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>df215619550c90677bb8784e61813c45</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a12e17f8a08312b3661671c1c2b6c4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>787c682f86d90d77fddc92f4045639b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>b9eb7cfe03f970af00ce999161dc8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>19cc52d765cc946a004c87e92ebc659a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>e87504d7d75d60d5e73b22de7e9826a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>c7a2b12c7ac068980d72b374d2ea4182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>bac41f2fb9ad8d503df9d8c27d3d6340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>c82817d342b9cf66e95a93bcdcc593ab</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, double &gt;</type>
      <name>MapType</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>f6fefbff9418703390176e2fc1120f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; simtime_t, double, Interpolator&lt; simtime_t, double, MapType::value_type, MapType::const_iterator &gt; &gt;::intpl_iterator</type>
      <name>IteratorType</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>9df041561e2132ff3eb74b9ea753a23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPos</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>1a9382671669207404a7edba9469145e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorType</type>
      <name>valueIt</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>41caa67a1698b11d963669e1022ad3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>f9dbee2a6ce9ba1d26d8e2cd82c413f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>228df0793fb7486e617aeb9ba6540863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isStepMapping</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>c8e1d2adb44399eb29c4b0fc4f84a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>atPreStep</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>79417d5433894eb05e64574c3c8a3090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Timer</name>
    <filename>a00137.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>5f16e8da27d2a5a5242dead46de05d97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>d3c95ce902fce977d280256256856d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>9d46776b2427d32bccef9f5e269e21c2</anchor>
      <arglist>(cModule *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>76b5ba4272cf874004df188df3c0e441</anchor>
      <arglist>(unsigned int index, simtime_t when)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>f232a673873962a27f612e04a39cb0aa</anchor>
      <arglist>(simtime_t when)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>e75d188c2e54bd13729fb169515fc0b2</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>remainingTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>8bcecfd99ee6cc01a384c55aa5d3bad4</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>2173406797e96aa63b965e25a9be498e</anchor>
      <arglist>(unsigned int index)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>7c440c3d2acec48d779307d0c8aedea8</anchor>
      <arglist>(unsigned int index, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contextPointer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>b0fb114ca39fe4d0ab59a3aed9e1544a</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextDestructor</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>e04f3c2bf90c2ed1db5913e60ae266c1</anchor>
      <arglist>(unsigned int index, void(*func)(void *data))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateTimers</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>e5dfc435f33f0c35bac62879184d9f3f</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTimer</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>671ce9068794f13b2f15cdd54119d8bf</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimerCore *</type>
      <name>ct</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>bccf4d90fa255618cb4cef4b7273cb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>owner</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>b348cb6f81e788ef92f3a60afa5a970d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkCT</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>d1875c45ecf8ec7ce710cc7e3b6ad3fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TimerCore</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>999e878d75aca57a628ccf8e6ce57364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimerCore</name>
    <filename>a00138.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type>typedef void()</type>
      <name>cleanup</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>8a425082874e8503554679e98183f11e</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimerCore</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>b111f5d18071222c5f4430882e2d26c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>93ca5fca6ebc0721043a69a3cc83e9a9</anchor>
      <arglist>(Timer *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>b8cda9efda31e457c52cb35df35358f1</anchor>
      <arglist>(unsigned int index, simtime_t when)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setTimer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>82a9e53719c6d202a625fee47b3218a8</anchor>
      <arglist>(simtime_t when)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelTimer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>80a71f2b5260aa27949a147e3bca52a8</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>remainingTimer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>dd07fb2b29fe3f84f133603573f03387</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>4c7e3a0e01131b2dfbd881a7bb457599</anchor>
      <arglist>(unsigned int index, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contextPointer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ce137442375abc65840d74ea11fd4db3</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextDestructor</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>6021d86b056453796b6c2f66ecec6ea6</anchor>
      <arglist>(unsigned int index, cleanup *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateTimers</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>75fadb3d88498e31b9abca9f859e5dc9</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTimer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a5222be46d94acbf8e8a23844244d72e</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkExists</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>45735968ad7a245b9a6f118af4d4c6e3</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>62c38e7d298f0b1d966b4af1a236a2b6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer *</type>
      <name>timer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>fbcfe1747af562889d8bd91a5fcb5bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, cMessage * &gt; *</type>
      <name>timers</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>7bb31550112c82f8a480a9f4a958644e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, cleanup * &gt; *</type>
      <name>destructors</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>db6c09ae23872341c8d5bbf306feff14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TractorMobility</name>
    <filename>a00139.html</filename>
    <base>BaseMobility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>5dc11ca4b22d7c70f796bf59b4a6ce3d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>f256b0901220e52e8543eef9d8d3db0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>899af9f3ee0f475a8e8a73e91f26aa00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateXY</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>20463824ee18b1e154b7da8f1b54a4bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>e24110fa394186fc2e6cc3fe71fa00c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>83ba237fe5f2fb2bd686f290106f84ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>174cd48f7f9a7de868d848cc1a06452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>b33d9d4f561dc9b75a5a0e9706d37e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dx</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>1e950f62991191bfb466299bab50af7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dy</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>cdab59667c8052eef6e63551d384238c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rows</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1a0430caba5079fd1562bb529f2f39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>row_length</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>0566635ab764c7aabaa9d2fde260a7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>row_width</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>b94b307d30843e181218ac70e2501beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>path_length</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>7784f22d14a54e52581144c37463123b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>position</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>031728a3ac8ac5b6910cbb3b4a791832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>5d4e04853e1fa0444ff82189ef2240fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TurtleMobility</name>
    <filename>a00140.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>212749b0f24e8668cbc65703a20f8f7b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>77b7dc906cdb7ac02ee420a4a8028ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>daaddb924e5b4fefc549e217d36317ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resumeScript</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>6301ae69ac2657ffb813f422885b4323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeStatement</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>df8a33f548f1f30804b8e8399b7f0dfd</anchor>
      <arglist>(cXMLElement *nextStatement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>9139ae0504735451c6767415f1951992</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>gotoNextStatement</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>999d116108ecc399eae6aaca63a45bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>turtleScript</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>08babee46db12aad334943374937962b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextStatement</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>adb591a9cc96eb64acde49644c45805b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>8e8e4dc8443ca6866b5540b3005e7b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BorderPolicy</type>
      <name>borderPolicy</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>e43798eb0dd7cb1e08eba3350edc46fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; long &gt;</type>
      <name>loopVars</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>c46a272d9b3a0d28684e4ea3ea675cbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitDisk</name>
    <filename>a00141.html</filename>
    <base>ConnectionManager</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>7ff362bb4f4d3d5464c42d1b2822e560</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>e83d638608dcf8d6267f3673792b914c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radioRange</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>fb22a745df1ad44eb5809ca4586c832c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>modules/analogueModel/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/analogueModel/</path>
    <filename>dir_6cb6e556a37ba9bd80af46217ef5a75f.html</filename>
    <file>JakesFading.cc</file>
    <file>JakesFading.h</file>
    <file>LogNormalShadowing.cc</file>
    <file>LogNormalShadowing.h</file>
    <file>SimplePathlossModel.cc</file>
    <file>SimplePathlossModel.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/analogueModels/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/analogueModels/</path>
    <filename>dir_c8eb3c0d76eee190913fafab78e1feae.html</filename>
    <file>RandomFreqTimeModel.cc</file>
    <file>RandomFreqTimeModel.h</file>
    <file>RandomFrequencyOnlyModel.cc</file>
    <file>RandomFrequencyOnlyModel.h</file>
    <file>SamplePhyLayer.cc</file>
    <file>SamplePhyLayer.h</file>
    <file>SimpleMacLayer.cc</file>
    <file>SimpleMacLayer.h</file>
    <file>ThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/application/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/application/</path>
    <filename>dir_aaa2222042802b8e65fd0993ddbc9d0c.html</filename>
    <file>BurstApplLayer.cc</file>
    <file>BurstApplLayer.h</file>
    <file>BurstApplLayerBattery.cc</file>
    <file>BurstApplLayerBattery.h</file>
  </compound>
  <compound kind="dir">
    <name>base/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/</path>
    <filename>dir_1538cff59aa1d865678ab06d5aac9144.html</filename>
    <dir>base/connectionManager/</dir>
    <dir>base/modules/</dir>
    <dir>base/phyLayer/</dir>
    <dir>base/timers/</dir>
    <dir>base/utils/</dir>
  </compound>
  <compound kind="dir">
    <name>modules/power/battery/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/battery/</path>
    <filename>dir_ee5053d92b435d66900be0ddd72bb04f.html</filename>
    <file>BatteryState.h</file>
    <file>BatteryStats.cc</file>
    <file>BatteryStats.h</file>
    <file>DeviceEntry.h</file>
    <file>SimpleBattery.cc</file>
    <file>SimpleBattery.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/connectionManager/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/connectionManager/</path>
    <filename>dir_970080e0b2103e5f1bf4420775c2e563.html</filename>
    <file>UnitDisk.cc</file>
    <file>UnitDisk.h</file>
  </compound>
  <compound kind="dir">
    <name>base/connectionManager/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/connectionManager/</path>
    <filename>dir_a6b554100b72aa23d505a9eb56dd402f.html</filename>
    <file>BaseConnectionManager.cc</file>
    <file>BaseConnectionManager.h</file>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ConnectionManager.cc</file>
    <file>ConnectionManager.h</file>
    <file>NicEntry.h</file>
    <file>NicEntryDebug.cc</file>
    <file>NicEntryDebug.h</file>
    <file>NicEntryDirect.cc</file>
    <file>NicEntryDirect.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/CSMAMac/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/CSMAMac/</path>
    <filename>dir_f8f5f6cbdc8632b57a7d3de8d9221d91.html</filename>
    <file>SimpleNetwLayer.cc</file>
    <file>SimpleNetwLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>doc/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/doc/</path>
    <filename>dir_e224b61653cadfc9468b6ed16393d71f.html</filename>
    <file>groups.h</file>
    <file>mainpage.h</file>
  </compound>
  <compound kind="dir">
    <name>examples/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/examples/</path>
    <filename>dir_40690ddf73efdddac751e895d4d4ef68.html</filename>
    <dir>examples/analogueModels/</dir>
    <dir>examples/CSMAMac/</dir>
  </compound>
  <compound kind="dir">
    <name>modules/mac/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mac/</path>
    <filename>dir_1203ddc6e97210a628f579a2abc14850.html</filename>
    <file>CSMAMacLayer.cc</file>
    <file>CSMAMacLayer.h</file>
    <file>Mac80211.cc</file>
    <file>Mac80211.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/mobility/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/mobility/</path>
    <filename>dir_8de829763a6312a8aed9b24a30f37dab.html</filename>
    <file>ANSimMobility.cc</file>
    <file>ANSimMobility.h</file>
    <file>BonnMotionFileCache.cc</file>
    <file>BonnMotionFileCache.h</file>
    <file>BonnMotionMobility.cc</file>
    <file>BonnMotionMobility.h</file>
    <file>CircleMobility.cc</file>
    <file>CircleMobility.h</file>
    <file>ConstSpeedMobility.cc</file>
    <file>ConstSpeedMobility.h</file>
    <file>LinearMobility.cc</file>
    <file>LinearMobility.h</file>
    <file>LineSegmentsMobilityBase.cc</file>
    <file>LineSegmentsMobilityBase.h</file>
    <file>MassMobility.cc</file>
    <file>MassMobility.h</file>
    <file>RectangleMobility.cc</file>
    <file>RectangleMobility.h</file>
    <file>TractorMobility.cc</file>
    <file>TractorMobility.h</file>
    <file>TurtleMobility.cc</file>
    <file>TurtleMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/</path>
    <filename>dir_9d35cab08155ccdd07b1ef7b7ef517ec.html</filename>
    <dir>modules/analogueModel/</dir>
    <dir>modules/application/</dir>
    <dir>modules/connectionManager/</dir>
    <dir>modules/mac/</dir>
    <dir>modules/mobility/</dir>
    <dir>modules/phy/</dir>
    <dir>modules/power/</dir>
    <dir>modules/utility/</dir>
  </compound>
  <compound kind="dir">
    <name>base/modules/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/modules/</path>
    <filename>dir_c680c0e35fdcfce1b41b660e5b17b9f8.html</filename>
    <file>BaseApplLayer.cc</file>
    <file>BaseApplLayer.h</file>
    <file>BaseArp.cc</file>
    <file>BaseArp.h</file>
    <file>BaseBattery.cc</file>
    <file>BaseBattery.h</file>
    <file>BaseLayer.cc</file>
    <file>BaseLayer.h</file>
    <file>BaseMacLayer.cc</file>
    <file>BaseMacLayer.h</file>
    <file>BaseMobility.cc</file>
    <file>BaseMobility.h</file>
    <file>BaseModule.cc</file>
    <file>BaseModule.h</file>
    <file>BaseNetwLayer.cc</file>
    <file>BaseNetwLayer.h</file>
    <file>BaseUtility.cc</file>
    <file>BaseUtility.h</file>
    <file>BaseWorldUtility.cc</file>
    <file>BaseWorldUtility.h</file>
    <file>BatteryAccess.cc</file>
    <file>BatteryAccess.h</file>
    <file>TestApplLayer.cc</file>
    <file>TestApplLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/phy/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/phy/</path>
    <filename>dir_56b6f8069e80c34c7d1dc7c27bf329a4.html</filename>
    <file>Decider80211.cc</file>
    <file>Decider80211.h</file>
    <file>Decider80211Battery.cc</file>
    <file>Decider80211Battery.h</file>
    <file>DeciderResult80211.h</file>
    <file>PhyLayer.cc</file>
    <file>PhyLayer.h</file>
    <file>PhyLayerBattery.cc</file>
    <file>PhyLayerBattery.h</file>
    <file>SNRThresholdDecider.cc</file>
    <file>SNRThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>base/phyLayer/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/phyLayer/</path>
    <filename>dir_098be402d6c2a2f6f8c8b868d19ba831.html</filename>
    <file>AnalogueModel.h</file>
    <file>BaseDecider.cc</file>
    <file>BaseDecider.h</file>
    <file>BasePhyLayer.cc</file>
    <file>BasePhyLayer.h</file>
    <file>ChannelInfo.cc</file>
    <file>ChannelInfo.h</file>
    <file>ChannelState.cc</file>
    <file>ChannelState.h</file>
    <file>Decider.cc</file>
    <file>Decider.h</file>
    <file>DeciderToPhyInterface.h</file>
    <file>Interpolation.h</file>
    <file>MacToPhyControlInfo.h</file>
    <file>MacToPhyInterface.h</file>
    <file>Mapping.h</file>
    <file>MappingBase.cc</file>
    <file>MappingBase.h</file>
    <file>MappingUtils.cc</file>
    <file>MappingUtils.h</file>
    <file>PhyToMacControlInfo.h</file>
    <file>PhyUtils.cc</file>
    <file>PhyUtils.h</file>
    <file>Signal.cc</file>
    <file>Signal_.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/power/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/power/</path>
    <filename>dir_656f7b63090707aa62fc3f602dd607fe.html</filename>
    <dir>modules/power/battery/</dir>
  </compound>
  <compound kind="dir">
    <name>base/timers/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/timers/</path>
    <filename>dir_e4faf3c60476c6d641ed58c1182ea40b.html</filename>
    <file>FrameTimer.cc</file>
    <file>FrameTimer.h</file>
    <file>FrameTimerGenerator.cc</file>
    <file>FrameTimerGenerator.h</file>
    <file>GlobalTime.cc</file>
    <file>GlobalTime.h</file>
    <file>RepeatTimer.cc</file>
    <file>RepeatTimer.h</file>
    <file>RepeatTimerCore.cc</file>
    <file>RepeatTimerCore.h</file>
    <file>Timer.cc</file>
    <file>Timer.h</file>
    <file>TimerCore.cc</file>
    <file>TimerCore.h</file>
  </compound>
  <compound kind="dir">
    <name>modules/utility/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/modules/utility/</path>
    <filename>dir_5aaa8b885a7268c9fdbe6c3fa459a0c8.html</filename>
    <file>Consts80211.h</file>
  </compound>
  <compound kind="dir">
    <name>base/utils/</name>
    <path>/home/karl/job/omnetpp4/MiXiM/base/utils/</path>
    <filename>dir_0d9d68998ef1f042acef3d4d4c863d32.html</filename>
    <file>Coord.cc</file>
    <file>Coord.h</file>
    <file>FindModule.h</file>
    <file>FWMath.h</file>
    <file>HostState.h</file>
    <file>ImNotifiable.h</file>
    <file>MacControlInfo.h</file>
    <file>Move.h</file>
    <file>NetwControlInfo.h</file>
    <file>PassedMessage.h</file>
    <file>SimpleAddress.h</file>
    <file>winsupport.cc</file>
    <file>winsupport.h</file>
  </compound>
</tagfile>
