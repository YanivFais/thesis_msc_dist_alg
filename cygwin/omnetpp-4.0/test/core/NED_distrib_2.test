%description:
check the distributions are properly accessible from NED

same as NED_distrib_1.test, only with plus rng parameter

FIXME: These tests are very fragile. They depend on the floating-point
arithmetic and the default printing of doubles being EXACTLY THE SAME
on all machines. They also break if anything changes in the underlying
RNGs.

!!! THIS TEST IS CURRENTLY OUT OF ORDER (%contains always matches) !!!
The dist/ dir can be used to test the functions.

%file: test.ned

simple Test
{
    parameters:
        @isNetwork(true);
        volatile double uniform_par = uniform(1.0, 2.0, 9);
        volatile double exponential_par = exponential(1.0, 9);
        volatile double normal_par = normal(1.0, 1.0, 9);
        volatile double truncnormal_par = truncnormal(1.0, 1.0, 9);
        volatile double gamma_d_par = gamma_d(2.0, 2.0, 9);
        volatile double beta_par = beta(1.0, 1.0, 9);
        volatile double erlang_k_par = erlang_k(1, 1.0, 9);
        volatile double chi_square_par = chi_square(2, 9);
        volatile double student_t_par = student_t(1, 9);
        volatile double cauchy_par = cauchy(1.0, 2.0, 9);
        volatile double triang_par = triang(1.0, 2.0, 3.0);
        volatile double lognormal_par = lognormal(1.0, 1.0, 9);
        volatile double weibull_par = weibull(1.0, 2.0, 9);
        volatile double pareto_shifted_par = pareto_shifted(1.0, 2.0, 3.0);

        volatile int intuniform_par = intuniform(0, 10, 9);
        volatile int bernoulli_par = bernoulli(0.3, 9);
        volatile int binomial_par = binomial(10, 0.3, 9);
        volatile int geometric_par = geometric(0.3, 9);
        volatile int negbinomial_par = negbinomial(10, 0.3, 9);
        // volatile int hypergeometric_par =  hypergeometric(1, 2, 2, 9),
        volatile int poisson_par = poisson(1.0, 9);
}

%file: test.cc

#include <omnetpp.h>

namespace @TESTNAME@ {

class Test : public cSimpleModule
{
  public:
    Test() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module(Test);

#define PAR_MEAN_AND_VARIANCE(PARNAME) \
 {\
   cPar& PARNAME = par(#PARNAME); cStdDev s; \
   for (int i=0; i<numrepl; i++) s.collect((double)PARNAME); \
   ev.printf("%s: m=%lg v=%lg\n", #PARNAME, s.getMean(), s.getVariance()); \
 }

void Test::activity()
{
    ev << "#UNRESOLVED: incomplete test case; needs to be revised or deleted\n";

    int numrepl=10000;

    PAR_MEAN_AND_VARIANCE(uniform_par);
    PAR_MEAN_AND_VARIANCE(exponential_par);
    PAR_MEAN_AND_VARIANCE(normal_par);
    PAR_MEAN_AND_VARIANCE(truncnormal_par);
    PAR_MEAN_AND_VARIANCE(gamma_d_par);
    PAR_MEAN_AND_VARIANCE(gamma_d_par);
    PAR_MEAN_AND_VARIANCE(beta_par);
    PAR_MEAN_AND_VARIANCE(erlang_k_par);
    PAR_MEAN_AND_VARIANCE(chi_square_par);
    PAR_MEAN_AND_VARIANCE(chi_square_par);
    PAR_MEAN_AND_VARIANCE(student_t_par);
    PAR_MEAN_AND_VARIANCE(cauchy_par);
    PAR_MEAN_AND_VARIANCE(triang_par);
    PAR_MEAN_AND_VARIANCE(lognormal_par);
    PAR_MEAN_AND_VARIANCE(weibull_par);
    PAR_MEAN_AND_VARIANCE(pareto_shifted_par);

    PAR_MEAN_AND_VARIANCE(intuniform_par);
    PAR_MEAN_AND_VARIANCE(bernoulli_par);
    PAR_MEAN_AND_VARIANCE(binomial_par);
    PAR_MEAN_AND_VARIANCE(geometric_par);
    PAR_MEAN_AND_VARIANCE(negbinomial_par);
    // PAR_MEAN_AND_VARIANCE(hypergeometric_par);
    PAR_MEAN_AND_VARIANCE(poisson_par);
}

}; //namespace

%inifile: test.ini
[General]
network = Test
num-rngs = 10
cmdenv-express-mode = false

%contains: stdout
incomplete
