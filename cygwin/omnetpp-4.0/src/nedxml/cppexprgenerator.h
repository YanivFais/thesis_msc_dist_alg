//==========================================================================
//  CPPEXPRGENERATOR.H - part of
//
//                     OMNeT++/OMNEST
//            Discrete System Simulation in C++
//
//==========================================================================

/*--------------------------------------------------------------*
  Copyright (C) 2002-2008 Andras Varga
  Copyright (C) 2006-2008 OpenSim Ltd.

  This file is distributed WITHOUT ANY WARRANTY. See the file
  `license' for details on this and other legal matters.
*--------------------------------------------------------------*/

#ifndef __CPPEXPRGENERATOR_H
#define __CPPEXPRGENERATOR_H

#include <string>
#include <map>
#include <vector>
#include <iostream>
#include "nedelements.h"

NAMESPACE_BEGIN


//XXX *** CURRENTLY NOT IN USE ***


using std::ostream;
class NEDTypeResolver;


/**
 * Helper class for NEDCppGenerator. Should be used in the following manner:
 *
 * 1. before entering a module declaration, collectExpressions() and
 *    generateExpressionClasses() should be called
 *
 * 2. inside the module, where expressions are actually used,
 *    generateExpressionUsage() should be called after outputting
 *    text like "value="
 *
 * The internal needsExpressionClass() method decides which expressions
 * are compiled inline and which with expression classes.
 *
 * @ingroup CppGenerator
 */
class NEDXML_API CppExpressionGenerator
{
  protected:
    typedef std::vector<NEDElement *> NEDElementVector;
    struct ExpressionInfo {
        ExpressionElement *expr;
        int ctxtype; // tagcode of toplevel element which contains this expr.
        NEDElement *submoduleTypeDecl; // if submodule or network, the type decl.
        std::string name; // generated expression class name (Expr0, Expr1, etc)
        NEDElementVector ctorargs;
        NEDElementVector cachedvars;
    };
    typedef std::map<ExpressionElement *,ExpressionInfo> NEDExpressionMap;

    static int count;
    ostream& out;
    NEDTypeResolver *resolver;
    NEDExpressionMap exprMap;

    enum {
      MODE_INLINE_EXPRESSION,
      MODE_EXPRESSION_CLASS
    };

    void doExtractArgs(ExpressionInfo& info, NEDElement *node);
    void doCollectExpressions(NEDElement *node, NEDElement *currentSubmodTypeDecl);
    void collectExpressionInfo(ExpressionElement *expr, NEDElement *currentSubmodTypeDecl);
    void generateExpressionClass(ExpressionInfo& info);
    const char *getTypeForArg(NEDElement *node);
    const char *getNameForArg(NEDElement *node);
    void doValueForArg(NEDElement *node);
    void doValueForCachedVar(NEDElement *node);

    void generateChildren(NEDElement *node, const char *indent, int mode);
    void generateItem(NEDElement *node, const char *indent, int mode);
    void doOperator(OperatorElement *node, const char *indent, int mode);
    void doFunction(FunctionElement *node, const char *indent, int mode);
    void doParamref(IdentElement *node, const char *indent, int mode);
    void doIdent(ObsoleteIdentElement *node, const char *indent, int mode);
    void doConst(LiteralElement *node, const char *indent, int mode);
    void doExpression(ExpressionElement *node, const char *indent, int mode);

    bool needsExpressionClass(ExpressionElement *expr, NEDElement *currentSubmodTypeDecl);

  public:
    /**
     * Constructor.
     */
    CppExpressionGenerator(ostream& out, NEDTypeResolver *resolver);

    /**
     * Destructor.
     */
    ~CppExpressionGenerator() {}

    /**
     * Recursively finds all &lt;expression&gt; tags within the passed node, and
     * stores references to them.
     */
    void collectExpressions(NEDElement *node);

    /**
     * Generate compiled expression classes (those derived from cExpression)
     * from all stored expressions. The evaluate() methods of the generated
     * classes will hold the expressions.
     */
    void generateExpressionClasses();

    /**
     * Generate a cPar initialization code that uses the compiled expression
     * classes generated by generateExpressionClasses().
     */
    void generateExpressionUsage(ExpressionElement *expr, const char *indent);
};

NAMESPACE_END


#endif


